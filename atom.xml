<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[mokai]]></title>
  <subtitle><![CDATA[修炼中...]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://mokai.github.io//"/>
  <updated>2016-09-11T11:53:42.000Z</updated>
  <id>http://mokai.github.io//</id>
  
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[3D Touch大法]]></title>
    <link href="http://mokai.github.io/2016/09/3d-touch/"/>
    <id>http://mokai.github.io/2016/09/3d-touch/</id>
    <published>2016-09-10T16:00:00.000Z</published>
    <updated>2016-09-11T11:53:42.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Demo同步更新到Swift2.3</p>
</blockquote>
<p>3D Touch最先应用在Apple Watch上面，但叫<code>Force Touch</code>，后在iPhone6s上加入了此特性，并改名3D Touch。值得注意的是目前3D Touch只支持iPhone6S以后的机型，包括现有Xcode7中6s的模拟器也不支持，不过Github上的<a href="https://github.com/DeskConnect/SBShortcutMenuSimulator" target="_blank" rel="external">SBShortcutMenuSimulator</a>项目通过Hack方式已经实现了<code>Quick Actions</code>快捷访问，但不能使用<code>Peek&amp;Pop</code>快速预览。</p>
<a id="more"></a>
<p>如果你还不知道3D Touch是什么，可以看看官方宣传视频</p>
<video src="http://images.apple.com/media/us/iphone-6s/2015/dhs3b549_75f9_422a_9470_4a09e709b350/films/feature/iphone6s-feature-cc-us-20150909_r848-9dwc.mov" controls><br></video>


<h2 id="环境">环境</h2><p>系统环境: iOS9 or later</p>
<p>开发环境: Swift2.3 &amp; Xcode7.3.1 </p>
<p>Demo: <a href="https://github.com/mokai/3DTouchDemo" target="_blank" rel="external">3DTouchDemo</a></p>
<p>效果：</p>
<video src="http://7xiew0.com1.z0.glb.clouddn.com/3dtouch.mov" controls width="320"><br></video>


<h2 id="开始">开始</h2><p>3D Touch可以分为三种：</p>
<ul>
<li>Quick Actions【可以理解PC桌面的快捷方式】</li>
<li>Peek&amp;Pop【应用内快速预览内容】</li>
<li>UITouch【自定义3D Touch事件】</li>
</ul>
<h2 id="Quick_Actions_快捷方式">Quick Actions 快捷方式</h2><p><img src="http://7xiew0.com1.z0.glb.clouddn.com/3dtouch_homeshorctquickactions.gif" alt=""></p>
<p>配置Actions可以通过工程<code>Info.plist</code>文件静态配置，也可以在运行时动态添加，两者可以一起使用。</p>
<p>静态配置在<code>Info.plist</code>中<code>UIApplicationShortcutItems</code>节点数组下添加相应Actions Item信息</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">key</span>&gt;</span>UIApplicationShortcutItems<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">array</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dict</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">key</span>&gt;</span>UIApplicationShortcutItemIconType<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">string</span>&gt;</span>UIApplicationShortcutIconTypeSearch<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">key</span>&gt;</span>UIApplicationShortcutItemTitle<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">string</span>&gt;</span>搜索<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">key</span>&gt;</span>UIApplicationShortcutItemType<span class="tag">&lt;/<span class="title">key</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">string</span>&gt;</span>me.mokai.TouchDemo.action.search<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">dict</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line"><span class="tag">&lt;/<span class="title">array</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>动态配置通过UIApplication的<code>shortcutItems</code>添加，shortcutItems是一个<code>UIApplicationShortcutItem</code>数组</p>
<figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">type</span> = <span class="string">"me.mokai.TouchDemo.action.identify"</span></span><br><span class="line"><span class="keyword">let</span> title = <span class="string">"听歌识别"</span></span><br><span class="line"><span class="keyword">let</span> shortcutItem = <span class="type">UIApplicationShortcutItem</span>(<span class="keyword">type</span>: <span class="keyword">type</span>, localizedTitle: title,</span><br><span class="line"> localizedSubtitle: <span class="literal">nil</span>, icon: <span class="type">UIApplicationShortcutIcon</span>(templateImageName: <span class="string">"quick_filter"</span>), userInfo: <span class="literal">nil</span>)</span><br><span class="line">application.shortcutItems = [shortcutItem]</span><br></pre></td></tr></table></figure>
<p><b>Note</b></p>
<ul>
<li>Actions的图标可以使用系统预定的也可以自定义图片</li>
<li>对于每个Actions来说<code>type</code>是必须的，它代表着我们从桌面点击Actions进入到应用调用<code>application(application, performActionForShortcutItem:, completionHandler:)</code>时的唯一标识，另外userInfo可以附加每个actions的数据，如最近听歌的歌曲id</li>
<li>当APP启动时，shortcutItems的值是上次动态添加的，如果是第一次启动则为空数组。</li>
<li>Actions最多显示4个，优先显示静态Actions，然后剩余个数显示shortcutItems的前几个。</li>
</ul>
<h2 id="Peek&amp;POP_快速预览">Peek&amp;POP 快速预览</h2><p>好了，下面介绍本文重头戏，先上效果</p>
<p><img src="http://7xiew0.com1.z0.glb.clouddn.com/3dtouch_peek.gif" alt=""></p>
<p>Peek窗口的内容其实是目标VC【ps即将要显示的ViewController】的一个实时快照，但它不可以点击。Peek触发阶段有三种：</p>
<ul>
<li>长按【显示一个焦点视图，触发Peek的源视图高亮，其它视图都处于模糊状态】</li>
<li>轻压【显示Peek窗口，此时如果Peek窗口支持Quick Actions，往上滑会显示Quick Actions菜单，此时的Peek窗口是不可以点击的】</li>
<li>重压 【进入到真正的ViewController】</li>
</ul>
<p>Peek由一个<code>可响应事件的View</code>触发，默认是关闭的，我们需要通过控制器的<code>registerForPreviewingWithDelegate: sourceView:</code>方法注册，第一个参数为<code>UIViewControllerPreviewingDelegate</code>的代理，Peek触发轻压时会调用其<code>previewingContext:viewControllerForLocation</code>方法，重压时会调用<code>previewingContext:commitViewController:</code>方法。第二个参数为触发Peek事件的源视图</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册</span></span><br><span class="line"><span class="function"><span class="title">registerForPreviewingWithDelegate</span><span class="params">(self, sourceView: userVCBtn)</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Delegate</span></span><br><span class="line"><span class="comment">//轻压，进入第二阶段，显示Peek窗口</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">previewingContext</span><span class="params">(previewingContext:  UIViewControllerPreviewing, viewControllerForLocation location:  CGPoint)</span></span> -&gt; <span class="type">UIViewController</span>? &#123;</span><br><span class="line">    <span class="keyword">let</span> userVc = <span class="keyword">self</span>.storyboard?.instantiateViewControllerWithIdentifier(<span class="string">"UserViewController"</span>) <span class="keyword">as</span>! <span class="type">UserViewController</span></span><br><span class="line">    <span class="keyword">return</span> userVc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重压，进入第三阶段，显示真正的ViewController</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">previewingContext</span><span class="params">(previewingContext: UIViewControllerPreviewing, commitViewController viewControllerToCommit: UIViewController)</span></span> &#123;</span><br><span class="line">    showViewController(viewControllerToCommit, sender: <span class="keyword">self</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果Peek窗口需要Quick Actions菜单，在目标VC中重写<code>previewActionItems</code>方法返回一个<code>UIPreviewActionItem</code>或者一个<code>UIPreviewActionGroup</code>数组就行了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目标VC</span></span><br><span class="line">lazy <span class="keyword">var</span> previewActions: [<span class="type">UIPreviewActionItem</span>] = &#123;</span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">previewActionForTitle</span><span class="params">(title: String, style:  UIPreviewActionStyle = .Default)</span></span> -&gt; <span class="type">UIPreviewAction</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">UIPreviewAction</span>(title: title, style: style) &#123; previewAction, viewController <span class="keyword">in</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"点击了<span class="subst">\(title)</span>"</span>) <span class="comment">//这里是Actions响应</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> action1 = previewActionForTitle(<span class="string">"关注TA"</span>,style: .<span class="type">Destructive</span>) <span class="comment">//显示红色，代表重要Action</span></span><br><span class="line">    <span class="keyword">let</span> action2 = previewActionForTitle(<span class="string">"私信TA"</span>)</span><br><span class="line">    <span class="comment">//子Actioons</span></span><br><span class="line">    <span class="keyword">let</span> subAction1 = previewActionForTitle(<span class="string">"微博"</span>)</span><br><span class="line">    <span class="keyword">let</span> subAction2 = previewActionForTitle(<span class="string">"好友圈"</span>)</span><br><span class="line">    <span class="keyword">let</span> subAction3 = previewActionForTitle(<span class="string">"QQ"</span>)</span><br><span class="line">    <span class="keyword">let</span> subAction4 = previewActionForTitle(<span class="string">"微信"</span>)</span><br><span class="line">    <span class="keyword">let</span> groupedActions = <span class="type">UIPreviewActionGroup</span>(title: <span class="string">"分享…"</span>, style: .<span class="type">Default</span>, actions: [subAction1, subAction2, subAction3, subAction4] )</span><br><span class="line">    <span class="keyword">return</span> [action1, action2, groupedActions]</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">previewActionItems</span><span class="params">()</span></span> -&gt; [<span class="type">UIPreviewActionItem</span>] &#123;</span><br><span class="line">    <span class="keyword">return</span> previewActions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="更快速的方法">更快速的方法</h4><p>上面是代码激活Peek的方式，还有更Peek的方式：直接在Storyboard中使用Segue，在Segue属性面板中把Peek &amp; Pop 勾选上就完事了。</p>
<p><img src="http://7xiew0.com1.z0.glb.clouddn.com/3dtouch_segue_peek.png" alt=""></p>
<p>使用这种方式指定我们在代码中连注册都不用，所以使用SB的项目适配3D Touch那是分分钟搞定的事，尤其在Xcode7出了<code>Storyboard References</code>后，我大 <code>Swift + Storyboard</code> 组合势必统一iOS界~</p>
<p>好了，有点小激动了，继续回到正文</p>
<p>在正常情况下，Peek窗口默认显示目标VC的整个View，但在实际应用中，可能会有更多的需求，比如说二个Button Push的是同一个VC，但是需要分别显示不同的Peek窗口。</p>
<p>其实也很简单，我们只需要自定义一个Peek的生命周期扩展就行了，<code>previewingContext:viewControllerForLocation:</code>方法中代表Peek的开始，<code>previewingContext:commitViewController</code>代表Peek的结束，然后在目标VC中重写二个方法就行了</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UIViewController+PeekCycle.swift</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Peek生命周期</span><br><span class="line">**/</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//开始peek，VC为Peek显示做初始化</span></span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">beginPeek</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//结束peek,VC为真正显示做初始化</span></span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">endPeek</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Delegate</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">previewingContext</span><span class="params">(previewingContext: UIViewControllerPreviewing, viewControllerForLocation location: CGPoint)</span></span> -&gt; <span class="type">UIViewController</span>? &#123;</span><br><span class="line">    <span class="keyword">let</span> detailVc = <span class="keyword">self</span>.storyboard?.instantiateViewControllerWithIdentifier(<span class="string">"DetailViewController"</span>) <span class="keyword">as</span>! <span class="type">DetailViewController</span></span><br><span class="line">    <span class="comment">//指定Peek窗口类型</span></span><br><span class="line">    detailVc.peekType = .<span class="type">Image</span></span><br><span class="line">    <span class="comment">//设置Peek的高度</span></span><br><span class="line">    detailVc.preferredContentSize = <span class="type">CGSize</span>(width: <span class="number">0.0</span>, height: <span class="number">320</span>);</span><br><span class="line">    detailVc.view <span class="comment">//先访问一下view，初始化</span></span><br><span class="line">    detailVc.beginPeek() <span class="comment">//peek开始</span></span><br><span class="line">    <span class="keyword">return</span> detailVc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">previewingContext</span><span class="params">(previewingContext: UIViewControllerPreviewing, commitViewController viewControllerToCommit: UIViewController)</span></span> &#123;</span><br><span class="line">    viewControllerToCommit.endPeek()  <span class="comment">//peek结束</span></span><br><span class="line">    showViewController(viewControllerToCommit, sender: <span class="keyword">self</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目标VC</span></span><br><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">beginPeek</span><span class="params">()</span></span> &#123; </span><br><span class="line">    <span class="keyword">if</span>(peekType == .<span class="type">Comments</span>)&#123; <span class="comment">//如果是评论则只显示评论视图</span></span><br><span class="line">        imageView.hidden = <span class="literal">true</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">//否则显示图片</span></span><br><span class="line">        commentsView.hidden = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">endPeek</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(peekType == .<span class="type">Comments</span>)&#123;</span><br><span class="line">        imageView.hidden = <span class="literal">false</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        commentsView.hidden = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><b>Note</b></p>
<ul>
<li>如果要改变Peek窗口的size可以设置目标VC的<code>preferredContentSize</code></li>
<li>对于直接使用<code>registerForPreviewingWithDelegate</code>注册VC的self.view，虽然可以自动注册subviews，但是如果说你的VC中不止一种视图要触发Peek，那么它会分分钟教你做人的道理。</li>
</ul>
<p><img src="http://7xiew0.com1.z0.glb.clouddn.com/funny_nonono.gif" alt=""></p>
<h2 id="UITouch">UITouch</h2><p>高级玩法，绘图、游戏，把3D Touch发挥到极致。不过我也唔知玩也暂时没这方面需求，有需求看<a href="https://developer.apple.com/library/prerelease/ios/samplecode/TouchCanvas/" target="_blank" rel="external">官方绘图demo</a></p>
<h2 id="参考">参考</h2><p><a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Adopting3DTouchOniPhone/" target="_blank" rel="external">Adopting 3D Touch on iPhone</a></p>
<p><a href="https://developer.apple.com/library/ios/samplecode/ApplicationShortcuts/Introduction/Intro.html#//apple_ref/doc/uid/TP40016545" target="_blank" rel="external">ApplicationShortcuts Demo</a></p>
<p><a href="https://developer.apple.com/library/ios/samplecode/ViewControllerPreviews/Introduction/Intro.html#//apple_ref/doc/uid/TP40016546" target="_blank" rel="external">ViewControllerPreviews Demo</a></p>
<h3 id="小小广告">小小广告</h3><p>本人目前是一名自由职业者，接受移动两端的项目开发，如果你有需求或者有资源请速与我联系吧，QQ865425695</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>Demo同步更新到Swift2.3</p>
</blockquote>
<p>3D Touch最先应用在Apple Watch上面，但叫<code>Force Touch</code>，后在iPhone6s上加入了此特性，并改名3D Touch。值得注意的是目前3D Touch只支持iPhone6S以后的机型，包括现有Xcode7中6s的模拟器也不支持，不过Github上的<a href="https://github.com/DeskConnect/SBShortcutMenuSimulator">SBShortcutMenuSimulator</a>项目通过Hack方式已经实现了<code>Quick Actions</code>快捷访问，但不能使用<code>Peek&amp;Pop</code>快速预览。</p>]]>
    
    </summary>
    
      <category term="3D Touch" scheme="http://mokai.github.io/tags/3D-Touch/"/>
    
      <category term="记录" scheme="http://mokai.github.io/categories/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS记录]]></title>
    <link href="http://mokai.github.io/2016/05/ios-note/"/>
    <id>http://mokai.github.io/2016/05/ios-note/</id>
    <published>2016-05-30T16:00:00.000Z</published>
    <updated>2016-09-11T10:38:48.000Z</updated>
    <content type="html"><![CDATA[<p>记录平时开发中的技巧与代码片段，持续更新！</p>
<h2 id="Xcode技巧">Xcode技巧</h2><ul>
<li>当真机升级了iOS，但对应Xcode未升级时，device会出现ineligible device，这时通过xocde菜单-&gt;Product-&gt;Destination-&gt;选择对应的device 即可解决</li>
<li><p>编译相关</p>
<ul>
<li><p>.a静态库编译</p>
<p>  <code>lipo -info xxx.a</code> 查看静态库支持的平台，目前有armv7、arm64、armv7s、i386 前三者为真机平台，后者为iphone Simulator</p>
<p>  <code>lipo -create libXXX-armv7s.a libXXX-i138.a -output libXXX.a</code> 合并生成通用平台的静态库</p>
</li>
<li><p>环境变量</p>
<p>  $(SRCROOT) 工程文件（比如Nuno.xcodeproj）的路径</p>
<p>  $(PROJECT_DIR) 项目目录    </p>
</li>
</ul>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>Xcode常见编译错误</p>
<ul>
<li><p><code>could not build module &#39;Foundation&#39;</code></p>
<p>  原因在于，在pch文件中没有把import放在<code>#ifdef_OBJC_</code></p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#ifdef</span> __OBJC__ </span><br><span class="line">    <span class="id">#import</span> &lt;UIKit/UIKit.h&gt; </span><br><span class="line">    <span class="id">#import</span> &lt;Foundation/Foundation.h&gt; </span><br><span class="line"><span class="id">#endif</span> </span><br><span class="line">    <span class="id">#import</span> <span class="string">"ddddd.h"</span>  <span class="comment">//此处移动上面 __OBJC__ 中就好了</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>IB技巧</p>
<ul>
<li>可视化坐标距离    选中一个View，然后按住<code>option</code>并将鼠标移动到其他View上</li>
<li>多个View层次选择 按住<code>Cmd</code>和<code>Shift</code>，然后在需要选择的view上方按右键</li>
<li>添加辅助线  在左边的层级列表中双击某个view，然后<code>Cmd+_</code>或者<code>Cmd+|</code>即可在选中的view上添加一条水平或者垂直中心的辅助线</li>
</ul>
</li>
<li><p>Xcode升级后插件失效修复</p>
</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find</span> ~<span class="regexp">/Library/</span>Application\ Support<span class="regexp">/Developer/</span>Shared<span class="regexp">/Xcode/</span>Plug-ins -name Info.plist -maxdepth <span class="number">3</span> | xargs -I&#123;&#125; defaults <span class="keyword">write</span> &#123;&#125; DVTPlugInCompatibilityUUIDs -array-add `defaults <span class="keyword">read</span> <span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/I</span>nfo.plist DVTPlugInCompatibilityUUID`</span><br></pre></td></tr></table></figure>
<ul>
<li>Facebook开源的LLDB命令插件：<a href="https://github.com/facebook/chisel" target="_blank" rel="external">Chisel-LLDB</a></li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>update</span><br><span class="line"><span class="keyword">brew </span>install chisel</span><br></pre></td></tr></table></figure>
<ul>
<li>LLDB中import UIKit</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch ~/<span class="class">.lldbinit</span> echo <span class="attribute">display</span> <span class="at_rule">@import</span> UIKit &gt;&gt; ~/<span class="class">.lldbinit</span> echo target stop-hook add -o \<span class="string">"target stop-hook disable\" &gt;&gt; ~/.lldbinit</span></span><br></pre></td></tr></table></figure>
<ul>
<li>修复多个Xcode导致的N个模拟器问题</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo killall -<span class="number">9</span> com<span class="class">.apple</span><span class="class">.CoreSimulator</span><span class="class">.CoreSimulatorService</span></span><br><span class="line">rm -rf ~/Library/Developer/CoreSimulator/Devices</span><br></pre></td></tr></table></figure>
<h2 id="常用技巧">常用技巧</h2><ul>
<li>Frame枚举类型转换为string通过 <code>NSStringFromCGRect</code></li>
<li>指定文件不使用arc，在<code>Build Phase</code> -&gt; <code>Compile Source</code>指定文件<code>Compile Flags</code>中加入<code>-fno-objc-arc</code></li>
<li>OC语法简写</li>
</ul>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span> NSNumber</span><br><span class="line">	<span class="keyword">*</span> [NSNumber numberWithChar:‘X’] 简写为 <span class="comment">@‘X’;</span></span><br><span class="line">	<span class="keyword">*</span> [NSNumber numberWithInt:12345] 简写为 <span class="comment">@12345</span></span><br><span class="line">	<span class="keyword">*</span> [NSNumber numberWithUnsignedLong:12345ul] 简写为 <span class="comment">@12345ul</span></span><br><span class="line">	<span class="keyword">*</span> [NSNumber numberWithLongLong:12345ll] 简写为 <span class="comment">@12345ll</span></span><br><span class="line">	<span class="keyword">*</span> [NSNumber numberWithFloat:123.45f] 简写为 <span class="comment">@123.45f</span></span><br><span class="line">	<span class="keyword">*</span> [NSNumber numberWithDouble:123.45] 简写为 <span class="comment">@123.45</span></span><br><span class="line">	<span class="keyword">*</span> [NSNumber numberWithBool:YES] 简写为 <span class="comment">@YES</span></span><br><span class="line"><span class="keyword">*</span> NSArray</span><br><span class="line">	<span class="keyword">*</span> [NSArray array] 简写为 <span class="comment">@[]</span></span><br><span class="line">	<span class="keyword">*</span> [NSArray arrayWithObject:a] 简写为 <span class="comment">@[ a ]</span></span><br><span class="line">	<span class="keyword">*</span> [NSArray arrayWithObjects:a, b, c, nil] 简写为 <span class="comment">@[ a, b, c ]</span></span><br><span class="line"><span class="keyword">*</span> NSDictionary</span><br><span class="line">	<span class="keyword">*</span> [NSDictionary dictionary] 简写为 <span class="comment">@&#123;&#125;</span></span><br><span class="line">	<span class="keyword">*</span> [NSDictionary dictionaryWithObject:o1 forKey:k1] 简写为 <span class="comment">@&#123; k1 : o1 &#125;</span></span><br><span class="line">	<span class="keyword">*</span> [NSDictionary dictionaryWithObjectsAndKeys:o1, k1, o2, k2, o3, k3, nil] 简写为 <span class="comment">@&#123; k1 : o1, k2 : o2, k3 : o3 &#125;</span></span><br><span class="line"><span class="keyword">*</span> 下标</span><br><span class="line">	<span class="keyword">*</span> [array objectAtIndex:idx] 简写为 array[idx];</span><br><span class="line">	<span class="keyword">*</span> [array replaceObjectAtIndex:idx withObject:newObj] 简写为 array[idx] = newObj</span><br><span class="line">	<span class="keyword">*</span> [dic objectForKey:key] 简写为 dic[key]</span><br><span class="line">	<span class="keyword">*</span> [dic setObject:object forKey:key] 简写为 dic[key] = newObject</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果想生成Mutable版本，直接调用 [@[] mutableCopy] 就行了</p>
</blockquote>
<ul>
<li><p>[NSDate date]获取的是GMT时间，和北京时间相差8个小时</p>
</li>
<li><p>拨打电话</p>
</li>
</ul>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">[<span class="collection">[UIApplication sharedApplication]</span> openURL:<span class="collection">[NSURL URLWithString:@<span class="string">"tel:466453"</span>]</span>]</span><span class="comment">;</span></span><br><span class="line"><span class="collection">[<span class="collection">[<span class="collection">[UIWebView alloc]</span> init]</span> loadRequest:<span class="collection">[NSURLRequest requestWithURL:<span class="collection">[NSURL URLWithString:@<span class="string">"tel:466453"</span>]</span>]</span>]</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>调用照相或者相册</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)takePicture:(<span class="built_in">UIButton</span> *)btn&#123;</span><br><span class="line">    _currentCardBtn = btn;</span><br><span class="line">    IBActionSheet *sheet = [[IBActionSheet alloc] initWithTitle:<span class="literal">nil</span> delegate:<span class="keyword">self</span> cancelButtonTitle:<span class="string">@"取消"</span> destructiveButtonTitle:<span class="literal">nil</span> otherButtonTitles:<span class="string">@"相册"</span>,<span class="string">@"拍照"</span>, <span class="literal">nil</span>];</span><br><span class="line">    [sheet showInView:<span class="keyword">self</span><span class="variable">.view</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)actionSheet:(IBActionSheet *)actionSheet clickedButtonAtIndex:(<span class="built_in">NSInteger</span>)buttonIndex&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%d"</span>,buttonIndex);</span><br><span class="line">    <span class="keyword">if</span> (buttonIndex==<span class="number">0</span>) &#123;<span class="comment">//相册</span></span><br><span class="line">        [<span class="keyword">self</span> takePicker:<span class="built_in">UIImagePickerControllerSourceTypePhotoLibrary</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(buttonIndex==<span class="number">1</span>)&#123;<span class="comment">//拍照</span></span><br><span class="line">        [<span class="keyword">self</span> takePicker:<span class="built_in">UIImagePickerControllerSourceTypeCamera</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)takePicker:(<span class="built_in">UIImagePickerControllerSourceType</span>)sourceType</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *mediatypes=[<span class="built_in">UIImagePickerController</span> availableMediaTypesForSourceType:sourceType];</span><br><span class="line">    <span class="keyword">if</span>([<span class="built_in">UIImagePickerController</span> isSourceTypeAvailable:sourceType] &amp;&amp;[mediatypes count]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">NSArray</span> *mediatypes=[<span class="built_in">UIImagePickerController</span> availableMediaTypesForSourceType:sourceType];</span><br><span class="line">        <span class="built_in">UIImagePickerController</span> *picker=[[<span class="built_in">UIImagePickerController</span> alloc] init];</span><br><span class="line">        picker<span class="variable">.mediaTypes</span>=mediatypes;</span><br><span class="line">        picker<span class="variable">.delegate</span>=<span class="keyword">self</span>;</span><br><span class="line">        picker<span class="variable">.allowsEditing</span>=<span class="literal">YES</span>;</span><br><span class="line">        picker<span class="variable">.sourceType</span>=sourceType;</span><br><span class="line">        <span class="built_in">NSString</span> *requiredmediatype=(<span class="built_in">NSString</span> *)kUTTypeImage;</span><br><span class="line">        <span class="built_in">NSArray</span> *arrmediatypes=[<span class="built_in">NSArray</span> arrayWithObject:requiredmediatype];</span><br><span class="line">        [picker setMediaTypes:arrmediatypes];</span><br><span class="line">        [<span class="keyword">self</span> presentViewController:picker animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        [AlertUtils showAlert:<span class="string">@"当前设备不支持拍摄功能"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)imagePickerController:(<span class="built_in">UIImagePickerController</span> *)picker didFinishPickingMediaWithInfo:(<span class="built_in">NSDictionary</span> *)info&#123;</span><br><span class="line">    <span class="comment">//self.lastChosenMediaType=[info objectForKey:UIImagePickerControllerMediaType];</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIImage</span> *chosenImage=[info objectForKey:<span class="built_in">UIImagePickerControllerEditedImage</span>];</span><br><span class="line">    <span class="comment">//_avatarImageView.image=chosenImage;</span></span><br><span class="line">    <span class="comment">//_currentCardBtn.imageView.image = chosenImage;</span></span><br><span class="line">    [_currentCardBtn setBackgroundImage:chosenImage forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [_currentCardBtn setTitle:<span class="string">@""</span> forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//    if([lastChosenMediaType isEqual:(NSString *) kUTTypeMovie])</span></span><br><span class="line">    <span class="comment">//    &#123;</span></span><br><span class="line">    <span class="comment">//        UIAlertView *alert=[[UIAlertView alloc] initWithTitle:@"提示信息!" message:@"系统只支持图片格式" delegate:nil cancelButtonTitle:@"确认" otherButtonTitles: nil];</span></span><br><span class="line">    <span class="comment">//        [alert show];</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    [picker dismissModalViewControllerAnimated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br><span class="line">-(<span class="keyword">void</span>) imagePickerControllerDidCancel:(<span class="built_in">UIImagePickerController</span> *)picker&#123;</span><br><span class="line">    [picker dismissModalViewControllerAnimated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实现截屏的方法</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入头文件</span></span><br><span class="line"><span class="id">#import</span> QuartzCore/QuartzCore<span class="class">.h</span></span><br><span class="line"><span class="comment">//将整个self.view大小的图层形式创建一张图片image 	UIGraphicsBeginImageContext(self.view.bounds.size)；</span></span><br><span class="line">[self<span class="class">.view</span><span class="class">.layer</span> renderInContext：<span class="function"><span class="title">UIGraphicsGetCurrentContext</span><span class="params">()</span></span>]；</span><br><span class="line">UIImage*image=<span class="function"><span class="title">UIGraphicsGetImageFromCurrentImageContext</span><span class="params">()</span></span>；</span><br><span class="line"><span class="function"><span class="title">UIGraphicsEndImageContext</span><span class="params">()</span></span>；</span><br><span class="line"><span class="comment">//然后将该图片保存到图片图</span></span><br><span class="line"><span class="function"><span class="title">UIImageWriteToSavedPhotosAlbum</span><span class="params">(image,self,nil,nil)</span></span>；</span><br></pre></td></tr></table></figure>
<ul>
<li>NSDictionary排序</li>
</ul>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSMutableDictionary</span> *dict = [@&#123;&#125;mutableCopy];</span><br><span class="line">dict[@(<span class="number">1</span>)] = @<span class="string">"1"</span>;</span><br><span class="line">dict[@(<span class="number">2</span>)] = @<span class="string">"2"</span>;</span><br><span class="line">dict[@(<span class="number">3</span>)] = @<span class="string">"3"</span>;</span><br><span class="line">dict[@(<span class="number">5</span>)] = @<span class="string">"4"</span>;</span><br><span class="line">dict[@(<span class="number">4</span>)] = @<span class="string">"5"</span>;</span><br><span class="line"><span class="type">NSArray</span> *arr = [dict.allKeys sortedArrayUsingComparator:^<span class="type">NSComparisonResult</span>(id obj1, id obj2)&#123;</span><br><span class="line">    <span class="type">NSComparisonResult</span> <span class="literal">result</span> = [obj1 compare:obj2];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">result</span>==<span class="type">NSOrderedDescending</span>;</span><br><span class="line">&#125;];</span><br><span class="line"><span class="type">NSLog</span>(@<span class="string">"%@"</span>,arr);</span><br></pre></td></tr></table></figure>
<ul>
<li>使用OpenURL打开设置页面</li>
</ul>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">* 网路设置项</span><br><span class="line">[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@<span class="string">"prefs:root=General&amp;path=Network"</span>]];  </span><br><span class="line">	</span><br><span class="line">* 定位设置</span><br><span class="line">[NSURL URLWithString:@<span class="string">"prefs:root=LOCATION_SERVICES"</span>];</span><br><span class="line">	</span><br><span class="line">* 设置Twitter</span><br><span class="line">[NSURL URLWithString:@<span class="string">"prefs:root=TWITTER"</span>];</span><br><span class="line">	</span><br><span class="line">* 蓝牙	</span><br><span class="line">[NSURL URLWithString:@<span class="string">"prefs:root=General&amp;path=Bluetooth"</span>];</span><br><span class="line">	</span><br><span class="line">* 其他</span><br><span class="line">prefs:<span class="variable">root=</span>General&amp;<span class="variable">path=</span>About</span><br><span class="line">prefs:<span class="variable">root=</span>General&amp;<span class="variable">path=</span>ACCESSIBILITY</span><br><span class="line">prefs:<span class="variable">root=</span>AIRPLANE_MODE</span><br><span class="line">prefs:<span class="variable">root=</span>General&amp;<span class="variable">path=</span>AUTOLOCK</span><br><span class="line">prefs:<span class="variable">root=</span>General&amp;<span class="variable">path=</span>USAGE/CELLULAR_USAGE</span><br><span class="line">prefs:<span class="variable">root=</span>Brightness</span><br><span class="line">prefs:<span class="variable">root=</span>General&amp;<span class="variable">path=</span>Bluetooth</span><br><span class="line">prefs:<span class="variable">root=</span>General&amp;<span class="variable">path=</span>DATE_AND_TIME</span><br><span class="line">prefs:<span class="variable">root=</span>FACETIME</span><br><span class="line">prefs:<span class="variable">root=</span>General</span><br><span class="line">prefs:<span class="variable">root=</span>General&amp;<span class="variable">path=</span>Keyboard</span><br><span class="line">prefs:<span class="variable">root=</span>CASTLE</span><br><span class="line">prefs:<span class="variable">root=</span>CASTLE&amp;<span class="variable">path=</span>STORAGE_AND_BACKUP</span><br><span class="line">prefs:<span class="variable">root=</span>General&amp;<span class="variable">path=</span>INTERNATIONAL</span><br><span class="line">prefs:<span class="variable">root=</span>LOCATION_SERVICES</span><br><span class="line">prefs:<span class="variable">root=</span>ACCOUNT_SETTINGS</span><br><span class="line">prefs:<span class="variable">root=</span>MUSIC</span><br><span class="line">prefs:<span class="variable">root=</span>MUSIC&amp;<span class="variable">path=</span>EQ</span><br><span class="line">prefs:<span class="variable">root=</span>MUSIC&amp;<span class="variable">path=</span>VolumeLimit</span><br><span class="line">prefs:<span class="variable">root=</span>General&amp;<span class="variable">path=</span>Network</span><br><span class="line">prefs:<span class="variable">root=</span>NIKE_PLUS_IPOD</span><br><span class="line">prefs:<span class="variable">root=</span>NOTES</span><br><span class="line">prefs:<span class="variable">root=</span>NOTIFICATIONS_ID</span><br><span class="line">prefs:<span class="variable">root=</span>Phone</span><br><span class="line">prefs:<span class="variable">root=</span>Photos</span><br><span class="line">prefs:<span class="variable">root=</span>General&amp;<span class="variable">path=</span>ManagedConfigurationList</span><br><span class="line">prefs:<span class="variable">root=</span>General&amp;<span class="variable">path=</span>Reset</span><br><span class="line">prefs:<span class="variable">root=</span>Sounds&amp;<span class="variable">path=</span>Ringtone</span><br><span class="line">prefs:<span class="variable">root=</span>Safari</span><br><span class="line">prefs:<span class="variable">root=</span>General&amp;<span class="variable">path=</span>Assistant</span><br><span class="line">prefs:<span class="variable">root=</span>Sounds</span><br><span class="line">prefs:<span class="variable">root=</span>General&amp;<span class="variable">path=</span>SOFTWARE_UPDATE_LINK</span><br><span class="line">prefs:<span class="variable">root=</span>STORE</span><br><span class="line">prefs:<span class="variable">root=</span>TWITTER</span><br><span class="line">prefs:<span class="variable">root=</span>General&amp;<span class="variable">path=</span>USAGE</span><br><span class="line">prefs:<span class="variable">root=</span>VIDEO</span><br><span class="line">prefs:<span class="variable">root=</span>General&amp;<span class="variable">path=</span>Network/VPN</span><br><span class="line">prefs:<span class="variable">root=</span>Wallpaper</span><br><span class="line">prefs:<span class="variable">root=</span>WIFI</span><br><span class="line">prefs:<span class="variable">root=</span>INTERNET_TETHERING</span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>No known instance method for selector &#39;respondsToSelector:&#39;</code><br>这种情况是声明的协议protocol没有继承NSObject导致 </p>
</li>
<li><p>复制字符串到剪贴板</p>
</li>
</ul>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UIPasteboard *pasteboard = [UIPasteboard generalPasteboard]<span class="comment">;</span></span><br><span class="line">pasteboard.string = xxx<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="常用组件">常用组件</h2><h4 id="UIView">UIView</h4><ul>
<li>圆角</li>
</ul>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">outLable.layer.<span class="variable">masksToBounds =</span> YES;</span><br><span class="line">outLable.layer.<span class="variable">cornerRadius =</span> <span class="number">5</span>;//如果要设置为圆，view的width与height一样，然后设置view.width/<span class="number">2</span></span><br><span class="line">outLable.layer.<span class="variable">borderWidth =</span> <span class="number">1</span>;</span><br><span class="line">outLable.layer.<span class="variable">borderColor =</span> TYPE_OUT</span><br></pre></td></tr></table></figure>
<h4 id="UILabel">UILabel</h4><ul>
<li>换行  内容加<code>\n</code>，然后设置label.numberOfLines = 0; </li>
<li>文本自适应</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">m_t</span>itleLabel.font = [UIFont systemFontOfSize:<span class="number">20</span>];</span><br><span class="line"><span class="keyword">m_t</span>itleLabel.adjustsFontSizeToFitWidth = YES;</span><br><span class="line"><span class="keyword">m_t</span>itleLabel.minimumFontSize = <span class="number">6</span>;</span><br></pre></td></tr></table></figure>
<p>就是在空间够的情况下，使用20号字体，如果空间不够，那么就会自动将字体向下调整，但是也不会少于6号字体，<br>如果6号字体也显示不完，后续显示省略号。。。</p>
<ul>
<li>计算文本高度</li>
</ul>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">lab</span> setNumberOfLines:0];</span><br><span class="line"><span class="keyword">lab</span>.lineBreakMode = UILineBreakModeWordWrap;</span><br><span class="line">CGSize maxSize = CGSizeMake(<span class="keyword">lab</span>.width, SCREEN_HEIGHT - <span class="keyword">lab</span>.top);</span><br><span class="line"><span class="keyword">lab</span>.size = [_descLab.text sizeWithFont:_descLab.font constrainedToSize:maxSize lineBreakMode:NSLineBreakByWordWrapping];</span><br></pre></td></tr></table></figure>
<h4 id="UITextField">UITextField</h4><ul>
<li>居中 </li>
</ul>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">field.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>获得焦点 </li>
</ul>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[field becomeFirstResponder]</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>在<code>textFieldShouldReturn</code>中becomeFirstResponder的正确姿势</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">textFieldShouldReturn</span><span class="params">(textField: UITextField)</span></span> -&gt; <span class="type">Bool</span>&#123;</span><br><span class="line">   textField.resignFirstResponder()</span><br><span class="line">   nextTextField.becomeFirstResponder()</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>隐藏输入法 </li>
</ul>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[self.view endEditing:YES]</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>键盘样式</p>
<ul>
<li><p>风格:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">textView<span class="variable">.keyboardType</span> = <span class="built_in">UIKeyboardTypeNumberPad</span>;</span><br><span class="line"><span class="keyword">typedef</span>  <span class="keyword">enum</span>  &#123;  </span><br><span class="line">    <span class="built_in">UIKeyboardTypeDefault</span>,                 <span class="comment">// 默认键盘：支持所有字符   </span></span><br><span class="line">    <span class="built_in">UIKeyboardTypeASCIICapable</span>,            <span class="comment">// 支持ASCII的默认键盘   </span></span><br><span class="line">    <span class="built_in">UIKeyboardTypeNumbersAndPunctuation</span>,   <span class="comment">// 标准电话键盘，支持+*#等符号   </span></span><br><span class="line">    <span class="built_in">UIKeyboardTypeURL</span>,                     <span class="comment">// URL键盘，有.com按钮；只支持URL字符   </span></span><br><span class="line">    <span class="built_in">UIKeyboardTypeNumberPad</span>,               <span class="comment">//数字键盘   </span></span><br><span class="line">    <span class="built_in">UIKeyboardTypePhonePad</span>,                <span class="comment">// 电话键盘   </span></span><br><span class="line">    <span class="built_in">UIKeyboardTypeNamePhonePad</span>,            <span class="comment">// 电话键盘，也支持输入人名字   </span></span><br><span class="line">    <span class="built_in">UIKeyboardTypeEmailAddress</span>,            <span class="comment">// 用于输入电子邮件地址的键盘   </span></span><br><span class="line">&#125; <span class="built_in">UIKeyboardType</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>键盘外观:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">textView<span class="variable">.keyboardAppearance</span>=<span class="built_in">UIKeyboardAppearanceDefault</span>;</span><br><span class="line"><span class="keyword">typedef</span>  <span class="keyword">enum</span>  &#123;  </span><br><span class="line">    <span class="built_in">UIKeyboardAppearanceDefault</span>,     <span class="comment">// 默认外观：浅灰色   </span></span><br><span class="line">    <span class="built_in">UIKeyboardAppearanceAlert</span>,       <span class="comment">//深灰/石墨色   </span></span><br><span class="line">&#125; <span class="built_in">UIKeyboardAppearance</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>回车键</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">textView<span class="variable">.returnKeyType</span>=<span class="built_in">UIReturnKeyGo</span>;</span><br><span class="line"><span class="keyword">typedef</span>  <span class="keyword">enum</span>  &#123;  </span><br><span class="line">    <span class="built_in">UIReturnKeyDefault</span>,  <span class="comment">//默认：灰色按钮，标有Return</span></span><br><span class="line">    <span class="built_in">UIReturnKeyGo</span>,  <span class="comment">//标有Go的蓝色按钮</span></span><br><span class="line">    <span class="built_in">UIReturnKeyGoogle</span>,  <span class="comment">//标有Google的蓝色按钮，用于搜索</span></span><br><span class="line">    <span class="built_in">UIReturnKeyJoin</span>,  <span class="comment">//标有Join的蓝色按钮</span></span><br><span class="line">    <span class="built_in">UIReturnKeyNext</span>,  <span class="comment">//标有Next的蓝色按钮</span></span><br><span class="line">    <span class="built_in">UIReturnKeyRoute</span>,  <span class="comment">//标有Route的蓝色按钮</span></span><br><span class="line">    <span class="built_in">UIReturnKeySearch</span>,  <span class="comment">//标有Search的蓝色按钮</span></span><br><span class="line">    <span class="built_in">UIReturnKeySend</span>,  <span class="comment">//标有Send的蓝色按钮</span></span><br><span class="line">    <span class="built_in">UIReturnKeyYahoo</span>,  <span class="comment">//标有Yahoo!的蓝色按钮，用于搜索</span></span><br><span class="line">    <span class="built_in">UIReturnKeyDone</span>,  <span class="comment">//标有Done的蓝色按钮</span></span><br><span class="line">    <span class="built_in">UIReturnKeyEmergencyCall</span>,  <span class="comment">//紧急呼叫按钮</span></span><br><span class="line">&#125; <span class="built_in">UIReturnKeyType</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>自动大写</p>
  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">textField<span class="variable">.autocapitalizationType</span> = <span class="built_in">UITextAutocapitalizationTypeWords</span></span><br><span class="line"><span class="keyword">typedef</span>  <span class="keyword">enum</span>  &#123;  </span><br><span class="line">    <span class="built_in">UITextAutocapitalizationTypeNone</span>,  <span class="comment">//不自动大写   </span></span><br><span class="line">    <span class="built_in">UITextAutocapitalizationTypeWords</span>,  <span class="comment">//单词首字母大写   </span></span><br><span class="line">    <span class="built_in">UITextAutocapitalizationTypeSentences</span>,  <span class="comment">//句子首字母大写   </span></span><br><span class="line">    <span class="built_in">UITextAutocapitalizationTypeAllCharacters</span>,  <span class="comment">//所有字母大写   </span></span><br><span class="line">&#125; <span class="built_in">UITextAutocapitalizationType</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自动更正</p>
  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">textField<span class="variable">.autocorrectionType</span>= <span class="built_in">UITextAutocorrectionTypeYes</span>;</span><br><span class="line"><span class="keyword">typedef</span>  <span class="keyword">enum</span>  &#123;  </span><br><span class="line">    <span class="built_in">UITextAutocorrectionTypeDefault</span>, <span class="comment">//默认   </span></span><br><span class="line">    <span class="built_in">UITextAutocorrectionTypeNo</span>, <span class="comment">//不自动更正   </span></span><br><span class="line">    <span class="built_in">UITextAutocorrectionTypeYes</span>, <span class="comment">//自动更正   </span></span><br><span class="line">&#125; <span class="built_in">UITextAutocorrectionType</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>安全文本输入</p>
  <figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textField.secureTextEntry=YES<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>显示消除图标 </p>
  <figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textField.clearButtonMode = UITextFieldViewModeWhileEditing<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>做字符个数限制时防止联想输入超过</p>
  <figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//防止联想输入超过</span></span><br><span class="line"><span class="keyword">if</span> (textView.<span class="keyword">text</span>.length &gt; maxLength) &#123;</span><br><span class="line">      textView.<span class="keyword">text</span> = [textView.<span class="keyword">text</span> substringToIndex:maxLength];</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="UITextView">UITextView</h4><ul>
<li>默认显示为最底下的内容，如果想显示最上面的内容使用</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private <span class="keyword">var</span> firstFlag = <span class="literal">true</span></span><br><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidLayoutSubviews</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLayoutSubviews()</span><br><span class="line">    guard firstFlag <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    firstFlag = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">self</span>.textView.scrollRangeToVisible(<span class="type">NSMakeRange</span>(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="UIScrollView">UIScrollView</h4><ul>
<li>去掉弹簧效果    </li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sView.bounces ＝ <span class="literal">no</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>动态改变内容区大小  contentSize </li>
<li>隐藏滑动条</li>
</ul>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scrollView.<span class="variable">showsVerticalScrollIndicator =</span> <span class="constant">false</span>;</span><br><span class="line">scrollView.<span class="variable">showsHorizontalScrollIndicator =</span> <span class="constant">false</span>;</span><br></pre></td></tr></table></figure>
<h4 id="UITableView">UITableView</h4><ul>
<li>去掉默认分割线  </li>
</ul>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span>.separatorStyle = <span class="keyword">NO</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>UITableViewCell去掉点击效果  </li>
</ul>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cell.selectionStyle = UITableViewCellSelectionStyleNone<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用UITableViewCellStyleGrouped要注意，ios6与ios7下的效果是不同的</li>
<li>显示右按钮 accessoryType</li>
<li>去掉UITableview headerview黏性(sticky)</li>
</ul>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- <span class="params">(void)</span>scrollViewDidScroll:<span class="params">(UIScrollView *)</span>scrollView &#123;</span><br><span class="line">    CGFloat sectionHeaderHeight = <span class="number">40</span>;</span><br><span class="line">    <span class="keyword">if</span> <span class="params">(scrollView.contentOffset.y&lt;=sectionHeaderHeight&amp;&amp;scrollView.contentOffset.y&gt;=<span class="number">0</span>)</span> &#123;</span><br><span class="line">        scrollView.contentInset = UIEdgeInsetsMake<span class="params">(-scrollView.contentOffset.y, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="params">(scrollView.contentOffset.y&gt;=sectionHeaderHeight)</span> &#123;</span><br><span class="line">        scrollView.contentInset = UIEdgeInsetsMake<span class="params">(-sectionHeaderHeight, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>UITableViewCell自动滚动到顶部 </li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[tableView <span class="string">scrollToRowAtIndexPath:</span>[NSIndexPath <span class="string">indexPathForRow:</span><span class="number">0</span> <span class="string">inSection:</span><span class="number">0</span>] <span class="string">atScrollPosition:</span>UITableViewScrollPositionTop <span class="string">animated:</span>YES];</span><br></pre></td></tr></table></figure>
<ul>
<li>取消选中状态 </li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">NSIndexPath</span> *<span class="keyword">selected </span>= [_tView indexPathForSelectedRow]<span class="comment">;</span></span><br><span class="line"><span class="label">if</span>(<span class="keyword">selected) </span>&#123;</span><br><span class="line">	[_tView deselectRowAtIndexPath:<span class="keyword">selected </span>animated:NO]<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>选中一行</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[self.tView <span class="string">selectRowAtIndexPath:</span>[NSIndexPath <span class="string">indexPathForRow:</span><span class="number">0</span> <span class="string">inSection:</span><span class="number">0</span>]  <span class="string">animated:</span>YES <span class="string">scrollPosition:</span>UITableViewScrollPositionTop];</span><br></pre></td></tr></table></figure>
<ul>
<li>TableView不显示没内容的Cell怎么办</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">self</span><span class="built_in">.</span>tView<span class="built_in">.</span>tableFooterView <span class="subst">=</span> <span class="preprocessor">[</span>UIView <span class="literal">new</span><span class="preprocessor">]</span><span class="markup">;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>手动调用<code>tableView:cellForRowAtIndexPath:</code>方法不会参与复用</p>
</li>
<li><p>在使用sectionIndex时，如果不想要indexView占位设置 </p>
</li>
</ul>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tableView.sectionIndexBackgroundColor = [UIColor clearColor]<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>设置背景色</li>
</ul>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">self</span>.<span class="built_in">table</span>View.backgroundColor = [UIColor blueColor];</span><br><span class="line"><span class="literal">self</span>.<span class="built_in">table</span>View.backgroundView.backgroundColor = <span class="literal">self</span>.<span class="built_in">table</span>View.backgroundColor ;</span><br></pre></td></tr></table></figure>
<ul>
<li>Section禁止吸附</li>
</ul>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- <span class="params">(void)</span>scrollViewDidScroll:<span class="params">(UIScrollView *)</span>scrollView &#123;</span><br><span class="line">    CGFloat sectionHeaderHeight = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> <span class="params">(scrollView.contentOffset.y &lt;= sectionHeaderHeight &amp;&amp; scrollView.contentOffset.y &gt;= <span class="number">0</span>)</span> &#123;</span><br><span class="line">        scrollView.contentInset = UIEdgeInsetsMake<span class="params">(-scrollView.contentOffset.y, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="params">(scrollView.contentOffset.y &gt;= sectionHeaderHeight)</span> &#123;</span><br><span class="line">        scrollView.contentInset = UIEdgeInsetsMake<span class="params">(-sectionHeaderHeight, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="UINavigationController">UINavigationController</h4><ul>
<li>设置主题颜色</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">navCtr<span class="variable">.navigationBar</span><span class="variable">.barTintColor</span> = app_theme_color;<span class="comment">//背景色</span></span><br><span class="line">navCtr<span class="variable">.navigationBar</span><span class="variable">.tintColor</span> = [<span class="built_in">UIColor</span> blackColor];<span class="comment">//文字</span></span><br><span class="line"><span class="built_in">NSDictionary</span> * dict=[<span class="built_in">NSDictionary</span> dictionaryWithObject:[<span class="built_in">UIColor</span> blackColor] forKey:<span class="built_in">UITextAttributeTextColor</span>];</span><br><span class="line">navCtr<span class="variable">.navigationBar</span><span class="variable">.titleTextAttributes</span> = dict;</span><br></pre></td></tr></table></figure>
<ul>
<li>改变返回标题</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在前一个页面执行</span></span><br><span class="line"><span class="built_in">UIBarButtonItem</span> *backItem = [[<span class="built_in">UIBarButtonItem</span> alloc] init];</span><br><span class="line"><span class="keyword">self</span><span class="variable">.navigationItem</span><span class="variable">.backBarButtonItem</span> = backItem;</span><br><span class="line">backItem<span class="variable">.title</span> = <span class="string">@""</span>;    </span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">[[<span class="built_in">UIBarButtonItem</span> appearance] setBackButtonTitlePositionAdjustment:<span class="built_in">UIOffsetMake</span>(<span class="number">0</span>, -<span class="number">60</span>)  forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br></pre></td></tr></table></figure>
<ul>
<li>当translucent打开时view.frame.orgin.y在iOS7与iOS8下的64个高度兼容</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ([<span class="keyword">self</span> respondsToSelector:<span class="keyword">@selector</span>(edgesForExtendedLayout)])</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.edgesForExtendedLayout</span> = <span class="built_in">UIRectEdgeNone</span>;   <span class="comment">// iOS 7 specific</span></span><br></pre></td></tr></table></figure>
<h2 id="资源">资源</h2><h4 id="Alcatraz_管理和发现插件">Alcatraz  管理和发现插件</h4><ul>
<li>安装 </li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/supermarin/Alcatraz/master/Scripts/install.<span class="keyword">sh</span> | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
<ul>
<li>卸载 </li>
</ul>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~<span class="regexp">/Library/</span>Application\ Support<span class="regexp">/Developer/</span>Shared<span class="regexp">/Xcode/</span>Plug-ins<span class="regexp">/Alcatraz.xcplugin</span></span><br></pre></td></tr></table></figure>
<ul>
<li>卸载所有插件 </li>
</ul>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/<span class="keyword">Library</span>/Application\ Support/Alcatraz</span><br></pre></td></tr></table></figure>
<ul>
<li><p>常用插件</p>
<ul>
<li>Injection 重量级插件，代码修改后不用build即可实现生效</li>
<li>OMColorSense 可视化设置Color</li>
<li>VVDocumenter-Xcode  生成java风格的注释</li>
<li>KSImageNamed-Xcode  可视化设置Image</li>
<li>XAlign 代码对齐</li>
<li>XcodeBoost 粘贴m文件的代码到h文件即可自动生成定义方法</li>
<li>Auto-Import 自动import头文件</li>
<li>DerivedData Exterminator 清除设备数据</li>
<li>ESJsonFormat 根据Json自动生成Model</li>
<li>FuzzyAutocomplete 自动补全，方法过长时能缩写</li>
<li>HOStringSense 字符串工具</li>
<li>NJHMultiTheme 代码主题</li>
<li>RTImageAssets 根据3x图片自动生成2x、1x图片</li>
<li>SCXcodeSwitchExpander 自动生成每项case 枚举值</li>
</ul>
</li>
</ul>
<h4 id="Cocospod库管理">Cocospod库管理</h4><ul>
<li>安装 </li>
</ul>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem <span class="keyword">install</span> cocoapods</span><br></pre></td></tr></table></figure>
<ul>
<li>更改源</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gem sources --remove <span class="string">https:</span><span class="comment">//rubygems.org/</span></span><br><span class="line">gem sources -a <span class="string">http:</span><span class="comment">//ruby.taobao.org/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>基本模板</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">platform <span class="symbol">:ios</span>, <span class="string">"7.0"</span></span><br><span class="line">inhibit_all_warnings!<span class="regexp">//pod</span>的工程不显示任何警告</span><br></pre></td></tr></table></figure>
<ul>
<li>常用Lib</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">pod</span> <span class="string">"MBProgressHUD"</span></span><br><span class="line">pod <span class="string">"SIAlertView"</span></span><br><span class="line">pod <span class="string">"FMDB"</span></span><br><span class="line">pod <span class="string">"AFNetworking"</span></span><br><span class="line">pod <span class="string">'Alamofire'</span>, <span class="string">'~&gt; 3.0'</span></span><br></pre></td></tr></table></figure>
<h4 id="利器">利器</h4><ul>
<li><code>cloc</code> 代码行数统计  <code>npm install -g cloc</code></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>记录平时开发中的技巧与代码片段，持续更新！</p>
<h2 id="Xcode技巧">Xcode技巧</h2><ul>
<li>当真机升级了iOS，但对应Xcode未升级时，device会出现ineligible device，这时通过xocde菜单-&gt;Product-&gt;Destination-&gt;选择对应的device 即可解决</li>
<li><p>编译相关</p>
<ul>
<li><p>.a静态库编译</p>
<p>  <code>lipo -info xxx.a</code> 查看静态库支持的平台，目前有armv7、arm64、armv7s、i386 前三者为真机平台，后者为iphone Simulator</p>
<p>  <code>lipo -create libXXX-armv7s.a libXXX-i138.a -output libXXX.a</code> 合并生成通用平台的静态库</p>
</li>
<li><p>环境变量</p>
<p>  $(SRCROOT) 工程文件（比如Nuno.xcodeproj）的路径</p>
<p>  $(PROJECT_DIR) 项目目录    </p>
</li>
</ul>
</li>
</ul>]]>
    
    </summary>
    
      <category term="记录" scheme="http://mokai.github.io/categories/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[#技巧4# 设置statusBarStyle无效]]></title>
    <link href="http://mokai.github.io/2015/11/ios-tip-status_bar_style_not_working/"/>
    <id>http://mokai.github.io/2015/11/ios-tip-status_bar_style_not_working/</id>
    <published>2015-11-17T16:00:00.000Z</published>
    <updated>2016-09-11T05:07:55.000Z</updated>
    <content type="html"><![CDATA[<p>新的一个APP，需要设置状态栏为白色，无论通过代码设置<code>UIApplication.sharedApplication().statusBarStyle = .LightContent</code><br>还是直接在 <code>TARGETS</code> 中设置，发现都无效。</p>
<p><img src="http://i.stack.imgur.com/NoSiZ.png" alt=""></p>
<p>我们只需要把<code>Info.plist</code>中的<code>View controller-based status bar appearance</code>改为NO就行了，默认为YES</p>
<h4 id="参考:">参考:</h4><p><a href="http://stackoverflow.com/questions/26372684/ios8-set-the-status-bar-to-light-content" target="_blank" rel="external">(iOS8) set the status bar to light content</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>新的一个APP，需要设置状态栏为白色，无论通过代码设置<code>UIApplication.sharedApplication().statusBarStyle = .LightContent</code><br>还是直接在 <code>TARGETS</code> 中设]]>
    </summary>
    
      <category term="iOS那些技巧" scheme="http://mokai.github.io/categories/iOS%E9%82%A3%E4%BA%9B%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[#技巧3# postNotificationName触发后的监听代码是同步还是异步执行的？]]></title>
    <link href="http://mokai.github.io/2015/11/ios-tip-postNoficationName/"/>
    <id>http://mokai.github.io/2015/11/ios-tip-postNoficationName/</id>
    <published>2015-11-16T16:00:00.000Z</published>
    <updated>2016-09-11T05:08:56.000Z</updated>
    <content type="html"><![CDATA[<p>昨天去酷狗面试，被问到<code>postNotificationName触发后的监听代码是同步还是异步执行的？</code>，我当时知道<code>触发后的监听代码和触发的代码是在同一线程上执行的</code>，但却回答了是异步，哎，我这逻辑又下降了。。。。</p>
<p>举个栗子，比如说HTTP异步请求返回代码中我们触发一个通知，这个时候在监听的代码中直接去设置视图就会报错，因为当前线程不是主线程，正确的姿态应该是</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dispatch_async<span class="list">(<span class="keyword">dispatch_get_main_queue</span><span class="list">()</span>, &#123; <span class="list">()</span> -&gt; Void in</span><br><span class="line">    NSNotificationCenter.defaultCenter<span class="list">()</span>.postNotificationName<span class="list">(<span class="keyword">kNotificationName</span>, object: <span class="literal">nil</span>)</span></span><br><span class="line">&#125;)</span></span><br></pre></td></tr></table></figure>
<p>当然你也可以选择另一种方式，<code>NSNotificationQueue</code>通知队列，我们可以通过它做很多基于Runloop的需求，最重要的是它是异步执行的。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let queue = NSNotificationQueue.<span class="function"><span class="title">defaultQueue</span><span class="params">()</span></span></span><br><span class="line">queue.<span class="function"><span class="title">enqueueNotification</span><span class="params">(NSNotification(name: kNotificationName, object: nil)</span></span>, postingStyle: NSPostingStyle.PostNow)</span><br></pre></td></tr></table></figure>
<h4 id="参考:">参考:</h4><p><a href="http://www.cnblogs.com/xiaouisme/archive/2012/04/06/2434753.html" target="_blank" rel="external">cocoa的NSNotification通知</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>昨天去酷狗面试，被问到<code>postNotificationName触发后的监听代码是同步还是异步执行的？</code>，我当时知道<code>触发后的监听代码和触发的代码是在同一线程上执行的</code>，但却回答了是异步，哎，我这逻辑又下降了。。。。</p>
<p]]>
    </summary>
    
      <category term="iOS那些技巧" scheme="http://mokai.github.io/categories/iOS%E9%82%A3%E4%BA%9B%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[#技巧2# 强制旋转应用当前屏幕]]></title>
    <link href="http://mokai.github.io/2015/10/ios-tip-screen_rotate/"/>
    <id>http://mokai.github.io/2015/10/ios-tip-screen_rotate/</id>
    <published>2015-10-30T16:00:00.000Z</published>
    <updated>2016-09-11T05:08:07.000Z</updated>
    <content type="html"><![CDATA[<p>经常有这样的需求，APP只需要竖屏，但是一些特殊的场景下需要横屏。</p>
<p>比如说调用系统的<code>MPMovieViewController</code>播放视频时，我们会在AppDelegate中或者UIViewController中更新允许横屏的配置，当播放器旋转到横屏（此时设备应该也是处于横屏），APP现有<code>ViewController</code>也会跟着旋转，那么问题来了，当再次回到APP时，此时现有<code>ViewController</code>是处于横屏的，我们再去代理中更新为竖屏会发现代理根本不会被调用，这时我们就需要用到下面这段代码，去手动触发屏幕旋转事件 </p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let vc = <span class="built_in">UIViewController</span>();</span><br><span class="line"><span class="keyword">self</span><span class="variable">.presentViewController</span>(vc, animated: <span class="literal">false</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">vc<span class="variable">.dismissViewControllerAnimated</span>(<span class="literal">false</span>, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>
<h4 id="参考:参考：">参考:参考：</h4><p><a href="http://foggry.com/blog/2014/08/08/ping-mu-xuan-zhuan-xue-xi-bi-ji/" target="_blank" rel="external">iOS屏幕旋转学习笔记</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>经常有这样的需求，APP只需要竖屏，但是一些特殊的场景下需要横屏。</p>
<p>比如说调用系统的<code>MPMovieViewController</code>播放视频时，我们会在AppDelegate中或者UIViewController中更新允许横屏的配置，当播放]]>
    </summary>
    
      <category term="iOS那些技巧" scheme="http://mokai.github.io/categories/iOS%E9%82%A3%E4%BA%9B%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[#技巧1# iOS8以后presendViewController透明效果无效]]></title>
    <link href="http://mokai.github.io/2015/10/ios-tip-viewcontroller_translucent/"/>
    <id>http://mokai.github.io/2015/10/ios-tip-viewcontroller_translucent/</id>
    <published>2015-10-09T16:00:00.000Z</published>
    <updated>2016-09-11T05:07:43.000Z</updated>
    <content type="html"><![CDATA[<p>iOS弹出的视图背景默认是黑色，如果想去掉，以往我们使用 <code>self.modalPresentationStyle = .CurrentContext</code> 就可以实现效果，如以下半透明的代码</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let vc = <span class="function"><span class="title">UIViewController</span><span class="params">()</span></span></span><br><span class="line">vc<span class="class">.view</span><span class="class">.backgroundColor</span> = <span class="function"><span class="title">UIColor</span><span class="params">(red: <span class="number">0.000</span>, green: <span class="number">0.000</span>, blue: <span class="number">0.000</span>, alpha: <span class="number">0.5</span>)</span></span></span><br><span class="line">self<span class="class">.modalPresentationStyle</span> = <span class="class">.CurrentContext</span></span><br><span class="line">self.<span class="function"><span class="title">presentViewController</span><span class="params">(vc, animated: true, completion:  nil)</span></span></span><br></pre></td></tr></table></figure>
<p>但是你会发现这段代码在iOS8、iOS9上面运行依旧一片黑，因此iOS8以后得这么干</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> vc = UIViewController<span class="params">()</span></span><br><span class="line">vc.view.backgroundColor = UIColor<span class="params">(red: <span class="number">0.000</span> , green: <span class="number">0.000</span> , blue: <span class="number">0.000</span>, alpha: <span class="number">0.5</span>)</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">let</span> <span class="built_in">version</span> = Float<span class="params">(UIDevice.currentDevice<span class="params">()</span>.systemVersion)</span> where <span class="built_in">version</span> &gt;= <span class="number">8</span> &#123;</span><br><span class="line">    vc.modalPresentationStyle = .OverCurrentContext <span class="comment">//注意此处是弹出VC对象，不是self</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    self.modalPresentationStyle = .CurrentContext</span><br><span class="line">&#125;</span><br><span class="line">self.presentViewController<span class="params">(vc, animated: <span class="literal">true</span>, completion: nil)</span></span><br></pre></td></tr></table></figure>
<p>iOS8后增加了<code>OverCurrentContext</code>取代<code>CurrentContext</code>，并且设置的对象是弹出的VC</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>iOS弹出的视图背景默认是黑色，如果想去掉，以往我们使用 <code>self.modalPresentationStyle = .CurrentContext</code> 就可以实现效果，如以下半透明的代码</p>
<figure class="highlight st]]>
    </summary>
    
      <category term="iOS那些技巧" scheme="http://mokai.github.io/categories/iOS%E9%82%A3%E4%BA%9B%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS国际化]]></title>
    <link href="http://mokai.github.io/2015/10/iOS-i18n/"/>
    <id>http://mokai.github.io/2015/10/iOS-i18n/</id>
    <published>2015-10-03T16:00:00.000Z</published>
    <updated>2016-09-12T06:26:00.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Demo同步更新到Swift2.3</p>
</blockquote>
<p>在真正将国际化实践前，只知道通过<code>NSLocalizedString</code>方法将相应语言的字符串加载进来即可。但项目的新需求增加英文版本，并支持应用内无死角切换~，这才跳过各种坑实现了应用内切换语言，并记录至此。</p>
<a id="more"></a>
<h3 id="环境">环境</h3><p>系统环境: iOS7 or later</p>
<p>开发环境: Swift2.3 &amp; Xcode7.3.1</p>
<p>DEMO: <a href="https://github.com/mokai/LocalDemo" target="_blank" rel="external">LocalDemo</a></p>
<p><img src="http://7xiew0.com1.z0.glb.clouddn.com/locale_0.gif" alt=""></p>
<p>这个Demo的功能主要是切换语言后相应的界面文字&amp;图片以及搜索引擎都会随语言变化。我们会围绕这个DEMO进行讲解，读者可以先下载这个Demo运行看下效果再往下</p>
<p><br></p>
<h3 id="iOS国际化原理分析">iOS国际化原理分析</h3><p>国际化其实都大同小异，其核心思想就是<code>为每种语言单独定义一份资源</code>。</p>
<p>iOS就是通过<code>xxx.lproj</code>目录来定义每个语言的资源，这里的资源可以是图片，文本，Storyboard，Xib等。我们可以看看LocalDemo源代码的物理目录结构</p>
<p>Base，暂时无需理会</p>
<p><img src="http://7xiew0.com1.z0.glb.clouddn.com/locale_1.png" alt=""></p>
<p>English</p>
<p><img src="http://7xiew0.com1.z0.glb.clouddn.com/locale_1_1.png" alt=""></p>
<p>中文</p>
<p><img src="http://7xiew0.com1.z0.glb.clouddn.com/locale_1_2.png" alt=""></p>
<p>每种语言都有自己的 <a href="http://www.lingoes.cn/zh/translator/langcode.htm" target="_blank" rel="external">语言代码</a>.lproj文件夹，加载资源时只需要加载相应语言文件夹下的资源就OK，这步可以系统为我们完成，也可以手动去做。</p>
<blockquote>
<p>项目源代码中如果有多个不同目录的国际化资源，则会有产生多个xxx.lproj，但在编译打包后，会集中放在app的根目录中的xxx.lproj中，不信你看~</p>
</blockquote>
<p><img src="http://7xiew0.com1.z0.glb.clouddn.com/locale_1_3.png" alt=""><br><br></p>
<h3 id="开始国际化">开始国际化</h3><p>首先点击项目-&gt;PROJECT-&gt;Info-&gt;Localizations中添加要支持的语言</p>
<p><img src="http://7xiew0.com1.z0.glb.clouddn.com/locale_2.png" alt=""></p>
<blockquote>
<p>此处Use Base Internationalization开启状态下，每个国际化资源文件会有个Base选项，主要针对String，Storyboard，Xib作为一个基础的模板，像后述<a href="#storyboard_2">storyboard国际化中方案二</a>就是基于Base StoryBoard进行改动。</p>
</blockquote>
<p>在点击<code>+</code> 添加相应语言时会弹出以下对话框，意思是为现有的资源添加语言文件，我们点击<code>Finish</code>就行了</p>
<p><img src="http://7xiew0.com1.z0.glb.clouddn.com/locale_2_1.png" alt=""></p>
<p><br></p>
<h3 id="文本的国际化">文本的国际化</h3><p>主要针对代码中的字符串进行国际化，比如说一些消息，UI标题等。</p>
<p>我们通过一个<code>Localizable.strings</code>文件来存储每个语言的文本，它是iOS默认加载的文件，如果想用自定义名称命名，在使用<code>NSLocalizedString</code>方法时指定tableName为自定义名称就好了，但你的应用规模不是很大就不要分模块搞特殊了。</p>
<p>每个资源文件如果想为一种语言添加支持，通过其属性面板中的<code>Localization</code>添加相应语言就行了，此时<code>Localizable.strings</code>处于可展开状态，子级有着相应语言的副本。我们把相应语言的文本放在副本里面就行了</p>
<p><img src="http://7xiew0.com1.z0.glb.clouddn.com/locale_3.png" alt=""></p>
<blockquote>
<p>此处Base与前面提过到的<code>开启Use Base Internationalization</code>是有关联的，只有开启了全局<code>Use Base Internationalization</code>此处才会显示。那为什么这里没有勾选Base？Base做为一个基础模板，作用于Strings文件是没有太大意义的，另外去掉Base意义着在Base.lproj中少了一个strings文件，APP大小也所有下降，这点对于图片的Base更是如此</p>
</blockquote>
<p>在上图可以看到其实就是为每一套语言新建一份strings，其内容采用<code>&quot;key&quot; = &quot;value&quot;;</code>的格式，注意有<code>;</code>号</p>
<p>我们在代码中这样写就行了</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">NSLocalizedString</span><span class="params">(<span class="string">"首页"</span>,comment: <span class="string">""</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">NSLocalizedString</span><span class="params">(<span class="string">"好友"</span>,comment: <span class="string">""</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">NSLocalizedString</span><span class="params">(<span class="string">"我"</span>,comment: <span class="string">""</span>)</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>另外中文strings【Localizable.strings(Simplified)】可以不要的(可以理解为中文为APP的默认语言)，因为key就是value，当找不到相应的语言strings或value时会直接返回key。nice！这样一来我们做文本的国际化就只要维护一个英文副本strings就O了</p>
</blockquote>
<p><br></p>
<h3 id="图片的国际化">图片的国际化</h3><p>二种方案，通过原生支持与自定义命名</p>
<blockquote>
<p>注意，新版Xcode中Images.xcassets不支持国际化（属性页面中没有<code>Localization</code>），Xcode5以前是支持的</p>
</blockquote>
<ul>
<li><p>方案一：自定义文本命名</p>
<p>  <img src="http://7xiew0.com1.z0.glb.clouddn.com/locale_4.png" alt=""></p>
<p>  利用文本国际化的方式，在代码中调用</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIImage<span class="list">(<span class="keyword">named</span>: NSLocalizedString<span class="list">(<span class="string">"search_logo"</span>,comment: <span class="string">""</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>不推荐，一是因为做法太low了，工作量明显加大。二是不能在Storyboard或XIB中使用</p>
</blockquote>
</li>
<li><p>方案二：原生支持<br><img src="http://7xiew0.com1.z0.glb.clouddn.com/locale_4_1.png" alt=""></p>
<blockquote>
<p>同上，Base副本去掉。另外需要注意的是，使用这种方式，在XIB或Storyboard中引用图片时如果只使用名称是实时显示不了的，一定要加上后缀名。如avater.png</p>
</blockquote>
<p>  使用方式不变，iOS会自动找相应语言(xxx.lproj)下的图片</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">UIImage</span><span class="params">(named: <span class="string">"avater"</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>  对于图片的放置，正确姿态应该是<code>需要国际化的图片放在自定义Group里面，不需要国际化的图片放在Images.xcassets</code></p>
</li>
</ul>
<p><br></p>
<h3 id="Storyboard&amp;XIB的国际化">Storyboard&amp;XIB的国际化</h3><p>前面的两种资源国际化比较简单，但Storyboard国际化就稍微麻烦了点。同样它也有二种方案</p>
<ul>
<li><p>方案一：每种语言定制一套Storyboard</p>
<p>  <img src="http://7xiew0.com1.z0.glb.clouddn.com/locale_5.png" alt=""></p>
<p>  在上图我们可以看到，每种语言都可以切换为strings或Storyboard（默认为strings）。如果选用<code>Interface Builder Storyboard</code>方案，那么每种语言都有一套相应的Storyboard，各个语言Storyboard间的界面改动不关联</p>
</li>
<li><p>方案二：基于基础的<code>Base StoryBoard</code>以及每种语言一套strings <a id="storyboard_2"></a></p>
<p>  <img src="http://7xiew0.com1.z0.glb.clouddn.com/locale_5_1.png" alt=""></p>
<p>基于一个基础的Storyboard，可以看作是一个基础的模板，Storyboard里面所有的文本类资源(如UILabel的text)都会被放在相应语言的strings里面。此时我们为Storyboard里的字符类资源作国际化只需要编辑相应语言的strings就行了</p>
</li>
</ul>
<p>首选方案二。因为采用方案一，意义着你每改动一个界面元素就得去相应语言Storyboard一一改动，那跟为每个语言新起一个项目是一样的道理。但是采用方案二，我们只需改动Base Storyboard就行了</p>
<blockquote>
<p>注意，方案二中相应语言的strings一旦生成后，Base Storyboard有任何编辑都不会影响到strings，这就意味着如果我们删除或添加了一个UILabel的text，strings也不能同步改动</p>
</blockquote>
<p>  还好，Xcode为我们提供了<code>ibtool</code>工具来生成Storyboard的strings文件。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ibtool Main.storyboard --<span class="keyword">generate</span>-strings-<span class="keyword">file</span> ./NewTemp.<span class="literal">string</span></span><br></pre></td></tr></table></figure>
<p>  但是ibtool生成的strings文件是BaseStoryboard的strings(默认语言的strings)，且会把我们原来的strings替换掉。所以我们要做的就是把新生成的strings与旧的strings进行冲突处理(新的附加上，删除掉的注释掉)，这一切可以用这个pythoy脚本来实现，见<a href="https://raw.githubusercontent.com/mokai/iOS-i18n/master/i18n/RunScript/AutoGenStrings.py" target="_blank" rel="external">AutoGenStrings.py</a>。然后我们将借助<code>Xcode 中 Run Script</code>来运行这段脚本。这样每次Build时都会保证语言strings与Base Storyboard保持一致</p>
<p><img src="http://7xiew0.com1.z0.glb.clouddn.com/locale_5_2.png" alt=""></p>
<p><br></p>
<h3 id="应用内切换语言">应用内切换语言</h3><p>应用启动时，首先会读取NSUserDefaults中的key为<code>AppleLanguages</code>的内容，该key返回一个String数组，存储着APP支持的语言列表，数组的第一项为APP当前默认的语言。</p>
<p>在安装后第一次打开APP时，会自动初始化该key为当前系统的语言编码，如简体中文就是zh-Hans。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取APP当前语言</span></span><br><span class="line">(NSUserDefaults.<span class="function"><span class="title">standardUserDefaults</span><span class="params">()</span></span>.<span class="function"><span class="title">valueForKey</span><span class="params">(<span class="string">"AppleLanguages"</span>)</span></span> as! Array&lt;String&gt;)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p>那么我们要实现语言切换改变<code>AppleLanguages</code>的值即可，但是这里有一个坑，因为苹果没提供给我们直接修改APP默认语言的API，我们只能通过NSUserDefaults手动去操作，且<code>AppleLanguages</code>的值改变后APP得重新启动后才会生效（才会读取相应语言的lproj中的资源，意义着就算你改了，资源还是加载的APP启动时lproj中的资源），猜测应该是框架层在第一次加载时对<code>AppleLanguages</code>的值进行了内存缓冲</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置APP当前语言</span></span><br><span class="line"><span class="tag">var</span> def = NSUserDefaults.<span class="function"><span class="title">standardUserDefaults</span><span class="params">()</span></span></span><br><span class="line">def.<span class="function"><span class="title">setValue</span><span class="params">([“zh-Hans”], forKey:<span class="string">"AppleLanguages"</span>)</span></span></span><br><span class="line">def.<span class="function"><span class="title">synchronize</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<p>那么问题来了，如何做到改变<code>AppleLanguages</code>的值就加载相应语言的lproj资源？</p>
<p>其实，APP中的资源加载（Storyboard、图片、字符串）都是在<code>NSBundle.mainBundle()</code>上操作的，那么我们只要在语言切换后把<code>NSBundle.mainBundle()</code>替换成当前语言的bundle就行了，这样系统通过<code>NSBundle.mainBundle()</code>去加载资源时实则是加载的当前语言bundle中的资源</p>
<blockquote>
<p>lproj目录可以用一个NSBundle表示</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">Foundation</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line">*  当调用onLanguage后替换掉mainBundle为当前语言的bundle</span><br><span class="line">*/</span></span><br><span class="line">private <span class="keyword">let</span> _bundle:<span class="type">UnsafePointer</span>&lt;<span class="type">Void</span>&gt; =  unsafeBitCast(<span class="number">0</span>,<span class="type">UnsafePointer</span>&lt;<span class="type">Void</span>&gt;.<span class="keyword">self</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BundleEx</span>: <span class="title">NSBundle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">localizedStringForKey</span><span class="params">(key: String, value: String?, table tableName: String?)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> bundle = languageBundle() &#123;</span><br><span class="line">            <span class="keyword">return</span> bundle.localizedStringForKey(key, value: value, table: tableName)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.localizedStringForKey(key, value: value, table: tableName)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSBundle</span> </span>&#123;</span><br><span class="line">    private <span class="class"><span class="keyword">struct</span> <span class="title">Static</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">var</span> onceToken : dispatch_once_t = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">onLanguage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//替换NSBundle.mainBundle()为自定义的BundleEx</span></span><br><span class="line">        dispatch_once(&amp;<span class="type">Static</span>.onceToken) &#123;</span><br><span class="line">            object_setClass(<span class="type">NSBundle</span>.mainBundle(), <span class="type">BundleEx</span>.<span class="keyword">self</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当前语言的bundle</span></span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">languageBundle</span><span class="params">()</span></span>-&gt;<span class="type">NSBundle</span>?&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Languager</span>.standardLanguager().currentLanguageBundle</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他">其他</h3><ul>
<li><p>设置运行语言环境</p>
<p>有时我们第一次安装APP时不想默认跟随系统，那么可以通过Xcode的scheme来指定特定语言</p>
<p><img src="http://7xiew0.com1.z0.glb.clouddn.com/locale_6.png" alt=""></p>
</li>
<li><p>Storyboard实时预览</p>
<p>直接上图~</p>
<p><img src="http://7xiew0.com1.z0.glb.clouddn.com/locale_6_1.png" alt=""></p>
</li>
</ul>
<ul>
<li><p>IB中UIImageView国际化无效</p>
<p>解决办法就是为<code>UIImageView</code>扩展一个方法，然后通过IB中的<code>User Defined Runtime Attributes</code>把imageName传进去</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIImageView</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> local: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span>(newlocal) &#123;</span><br><span class="line">            <span class="keyword">self</span>.image = localizedImage(newlocal)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  <img src="http://7xiew0.com1.z0.glb.clouddn.com/locale_6_2.png" alt=""></p>
</li>
<li><p>IB中UITextView国际化无效</p>
<p>解决办法和UIImageView类似，扩展一个方法，然后把self.text做为key去strings文件中拿相应语言的value</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UITextView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> local: <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span>(newlocale) &#123;</span><br><span class="line">            <span class="keyword">self</span>.text = localized(<span class="keyword">self</span>.text)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://7xiew0.com1.z0.glb.clouddn.com/locale_6_3.png" alt=""></p>
</li>
</ul>
<ul>
<li><p>LaunchScreen.xib的国际化</p>
<p> 很遗憾，到目前为止，还不支持LaunchScreen.xib的国际化，我们只能通过自定义一个LaunchViewController来完成此需求，但也有些不足，就是应用启动时会黑屏一段时间，所以建议启动页面不要弄国际化</p>
</li>
</ul>
<h3 id="总结">总结</h3><p>参考:</p>
<ul>
<li><a href="http://www.cnblogs.com/levilinxi/p/4296712.html" target="_blank" rel="external">iOS国际化——通过脚本使storyboard翻译自增</a></li>
<li><a href="https://medium.com/ios-apprentice/working-with-localization-905e4052b9de" target="_blank" rel="external">Working with Localization</a></li>
<li><a href="http://stackoverflow.com/questions/1669645/how-to-force-nslocalizedstring-to-use-a-specific-language" target="_blank" rel="external">How to force NSLocalizedString to use a specific language</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>Demo同步更新到Swift2.3</p>
</blockquote>
<p>在真正将国际化实践前，只知道通过<code>NSLocalizedString</code>方法将相应语言的字符串加载进来即可。但项目的新需求增加英文版本，并支持应用内无死角切换~，这才跳过各种坑实现了应用内切换语言，并记录至此。</p>]]>
    
    </summary>
    
      <category term="国际化" scheme="http://mokai.github.io/tags/%E5%9B%BD%E9%99%85%E5%8C%96/"/>
    
      <category term="记录" scheme="http://mokai.github.io/categories/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[蓝牙编程]]></title>
    <link href="http://mokai.github.io/2015/09/bluetooth-guide/"/>
    <id>http://mokai.github.io/2015/09/bluetooth-guide/</id>
    <published>2015-09-07T16:00:00.000Z</published>
    <updated>2016-09-11T13:40:11.000Z</updated>
    <content type="html"><![CDATA[<p>蓝牙技术，很早以前就被有了，如今已更新4.0版本。很多热门技术都是基于它工作的，如Android平台的NFC，iOS的iBeancon，Apple Watch的WatchConnectivity框架等，现在的智能家居基本也是基于蓝牙4.0与APP进行通信，可见蓝牙在实践工作中的重要性。在iOS中，蓝牙是基于4.0标准的，设备间低功耗通信。</p>
<a id="more"></a>
<h2 id="核心成员">核心成员</h2><p>在开始前我们回忆下传统的Socket编程，里面有Server服务端与Client端的区别。那么在蓝牙编程也是如此，其中<code>Peripheral</code>外设相当于Socket编程中的Server服务端，<code>Central</code>中心相当于Client客户端(ps吐槽下，Central中心，作为服务端，不更适合吗！)</p>
<p><img src="https://developer.apple.com/library/ios/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/Art/CBDevices1_2x.png" width="600" height="400"></p>
<p>你可以理解外设是一个广播数据的设备，它开始告诉外面的世界说它这儿有一些数据，并且能提供一些服务。另一边中心开始扫描周边有没有合适的设备，如果发现后，会和外设做连接请求，一旦连接确定后，两个设备就可以传输数据了。</p>
<p>在iOS6之后，iOS 设备可以是外设，也可以是中心，就像Socket编程中一样，你可以是服务端也可以是客户端。</p>
<h4 id="服务(service)和特征(characteristic)">服务(service)和特征(characteristic)</h4><p>每个蓝牙4.0的设备都是通过服务和特征来展示自己的，一个设备必然包含一个或多个服务，每个服务下面又包含若干个特征。特征是与外界交互的最小单位。比如说，智能音响设备，用服务A标识播放模块，特征A1来表示播放上一首，特征A2来表示播放下一首；服务B标识设置模块，特征B1设置彩灯颜色。这样做的目的主要为了<code>模块化</code>。</p>
<blockquote>
<p>外设，服务，特征都有一个<code>UUID</code>来标识</p>
</blockquote>
<p>上面说了设备可以是外设，也可以是中心，也就是会有二种模式  </p>
<ul>
<li>本地中心 -&gt; 远程外设   </li>
<li>本地外设 -&gt; 远程中心 </li>
</ul>
<p>不过在智能家居开发中，大部分硬件蓝牙都是担任外设的角色，也就是说我们应用只要扮演中心即可了。</p>
<h2 id="开始">开始</h2><p>本篇只讲述第一种模式的本地中心，远程外设端可借助 <del><a href="https://itunes.apple.com/cn/app/lightblue/id639944780?mt=12" target="_blank" rel="external">蓝牙调试神器LightBlue For Mac</a></del>。需要了解第二种模式可以移步<a href="https://developer.apple.com/library/ios/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/PerformingCommonPeripheralRoleTasks/PerformingCommonPeripheralRoleTasks.html#//apple_ref/doc/uid/TP40013257-CH4-SW1" target="_blank" rel="external">创建外设</a> </p>
<blockquote>
<p>更新：LightBlue For Mac只可以做为Central，不可以做为Peripheral，如需模拟请下载<a href="https://itunes.apple.com/cn/app/lightblue-explorer-bluetooth/id557428110?mt=8" target="_blank" rel="external">iOS版本</a></p>
</blockquote>
<p>蓝牙交互的流程大致为</p>
<blockquote>
<p>建立中心角色 —&gt; 扫描外设（discover）—&gt; 发现外设后连接外设(connect) —&gt; 扫描外设中的服务和特征(discover) —&gt; 与外设做数据交互(explore and interact) —&gt; 断开连接(disconnect)。</p>
</blockquote>
<p>下面我们一一讲到</p>
<h2 id="建立中心角色">建立中心角色</h2><p>在本地中心角色中，使用CBCentralManager类管理，我们创建一个CBCentralManager类</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">queue</span> <span class="subst">=</span> dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">let</span> centralMgr <span class="subst">=</span> CBCentralManager(delegate: <span class="built_in">self</span>, <span class="built_in">queue</span>: <span class="built_in">queue</span>)</span><br></pre></td></tr></table></figure>
<p>上面的delegate为CBCentralManagerDelegate，后续蓝牙相关的回调都会在此。Queue代表蓝牙在哪个队列里面操作，如果传入nil默认为主队列，值得注意的是后续的回调也是在传入的队列中调用的，所以如果传入的是非主线程的队列，在delegate中需要操作UI时需要手动切换到主线程</p>
<p>CBCentralManager对象创建后会回调到<code>centralManagerDidUpdateState</code>方法来检测蓝牙可用状态，这时我们可以提醒用户设备是否支持蓝牙，是否打开了蓝牙</p>
<h2 id="扫描外设">扫描外设</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let serviceUUIDS: Array&lt;CBUUID&gt; = [<span class="function"><span class="title">CBUUID</span><span class="params">(string: <span class="string">"FFDD"</span>)</span></span>]</span><br><span class="line">self<span class="class">.centralMgr</span><span class="class">.scanForPeripheralsWithServices</span>(serviceUUIDS, options: [CBCentralManagerScanOptionAllowDuplicatesKey : true])</span><br><span class="line"></span><br><span class="line"><span class="comment">//停止扫描</span></span><br><span class="line">self<span class="class">.centralMgr</span><span class="class">.stopScan</span>()</span><br></pre></td></tr></table></figure>
<p>如果serviceUUIDS为nil则会扫描周围所有的设外设，否则只会扫描UUID匹配的外设。CBCentralManagerScanOptionAllowDuplicatesKey默认为false，表示扫描中发现过设备则跳过不回调，我们这里传入true，因为下面做外设掉线的处理时需要用到</p>
<blockquote>
<p>传入的serviceUUIDS数组元素为CBUUID类型，千万不要传入String，后面的操作也是如此，不然会碰到很多奇葩问题</p>
</blockquote>
<p>发现外设后会回调到<code>centralManager(central:didDiscoverPeripheral:advertisementData:RSSI:)</code> ，perpheral则代表着外设，我们需要保存起来，后续的对外设的操作都是基于perpheral对象的</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">centralManager</span><span class="params">(central: CBCentralManager!, didDiscoverPeripheral peripheral: CBPeripheral!, advertisementData: [NSObject : AnyObject]!, RSSI: NSNumber!)</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;discoveredPeripheralers.<span class="built_in">count</span> &#123;</span><br><span class="line">       <span class="keyword">var</span> peripheraler = discoveredPeripheralers[i]</span><br><span class="line">       <span class="keyword">if</span>(!peripheral.identifier.isEqual(peripheraler.peripheral.identifier))&#123; <span class="comment">//未发现过才保存</span></span><br><span class="line">          discoveredPeripheralers.append(peripheraler)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="连接外设">连接外设</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">self</span><span class="class">.centralMgr</span><span class="class">.connectPeripheral</span>(<span class="tag">peripheral</span>, <span class="rule"><span class="attribute">options</span>:<span class="value"> nil)</span></span></span><br></pre></td></tr></table></figure>
<p>传入上面保存的外设对象，如果连接失败后会回调到 <code>centralManager(central:didFailToConnectPeripheral:error:)</code>，连接成功后会回调到 <code>centralManager(central:didConnectPeripheral:)</code>，这个时候我们只是连接上外设而已，还需要发现外设中的服务与特征</p>
<h2 id="发现服务与特征">发现服务与特征</h2><p>外设连接成功后我们把peripheral保存好，并设置好peripheral的delegate(CBPeripheralDelegate)，然后调用discoverServices来发现服务，同扫描外设时一样，discoverServices也可以传入一个serviceUUIDs参数来只获取需要的服务</p>
<blockquote>
<p>注意，注意，注意，重要的话说三遍。以下的回调都是CBPeripheralDelegate的了，不再是CBCentralManagerDelegate的回调</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">centralManager</span><span class="params">(central: CBCentralManager!, didConnectPeripheral peripheral: CBPeripheral!)</span></span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.peripheral = peripheral</span><br><span class="line">    <span class="keyword">self</span>.peripheral.delegate = <span class="keyword">self</span></span><br><span class="line">    <span class="keyword">let</span> serviceUUIDS: <span class="type">Array</span>&lt;<span class="type">CBUUID</span>&gt; = [<span class="type">CBUUID</span>(string: <span class="string">"FF12"</span>)]</span><br><span class="line">    <span class="keyword">self</span>.peripheral.discoverServices(serviceUUIDS)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发现服务后回调到<code>peripheral(peripheral:didDiscoverServices:)</code>，这时我们就可以访问所有发现的服务一一去发现服务下的特征</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">peripheral</span><span class="params">(peripheral: CBPeripheral!, didDiscoverServices error: NSError!)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span>(error != <span class="literal">nil</span>) &#123;</span><br><span class="line">	    log(error)</span><br><span class="line">	    <span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> item <span class="keyword">in</span> peripheral.services &#123;</span><br><span class="line">		<span class="keyword">let</span> service = item <span class="keyword">as</span>! <span class="type">CBService</span></span><br><span class="line">		<span class="keyword">let</span> characteristicUUIDs: <span class="type">Array</span>&lt;<span class="type">CBUUID</span>&gt; = [<span class="type">CBUUID</span>(string: <span class="string">"FF02"</span>), <span class="type">CBUUID</span>(string: <span class="string">"FF04"</span>)]</span><br><span class="line">		peripheral.discoverCharacteristics(characteristicUUIDs, forService: service)  <span class="comment">//发现特征</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样特征也可以传入characteristicUUIDs数组来过滤，发现特征后回调</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">peripheral</span><span class="params">(peripheral: CBPeripheral!, didDiscoverCharacteristicsForService service: CBService!, error: NSError!)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(error != <span class="literal">nil</span>)&#123;</span><br><span class="line">        log(error)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> service.characteristics &#123;</span><br><span class="line">        <span class="keyword">let</span> characteristic = item <span class="keyword">as</span>! <span class="type">CBCharacteristic</span></span><br><span class="line">        <span class="keyword">if</span>(characteristic.properties == .<span class="type">Notify</span>) &#123; <span class="comment">//如果特征为订阅属性则开启订阅</span></span><br><span class="line">            peripheral.setNotifyValue(<span class="literal">true</span>, forCharacteristic: characteristic)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每进入一次回调代表发现一个服务中的特征而不是外设所有的特征，外设、服务、特征从左至右都是上下级一对多的关系。<br>每个特征都有个属性，代表着它是可写、可读等，一个特征可同时拥有读写权限，如上面的订阅其实是一种订阅者模式的读取数据</p>
<h2 id="发送数据">发送数据</h2><p>拿到可写的特征后，通过writeValue发送数据包</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">data</span> <span class="subst">=</span> <span class="string">"hello"</span><span class="built_in">.</span>dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: <span class="literal">true</span>)</span><br><span class="line"><span class="comment">//自动判断写特征的类型</span></span><br><span class="line"><span class="built_in">var</span> <span class="keyword">type</span>: CBCharacteristicWriteType <span class="subst">=</span> <span class="built_in">.</span>WithoutResponse</span><br><span class="line"><span class="keyword">if</span>(writeCharacteristic<span class="built_in">.</span>properties <span class="subst">==</span> CBCharacteristicProperties<span class="built_in">.</span>Write) &#123;</span><br><span class="line">    <span class="keyword">type</span> <span class="subst">=</span> <span class="built_in">.</span>WithResponse</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">self</span><span class="built_in">.</span>peripheral<span class="subst">!</span><span class="built_in">.</span>writeValue(<span class="built_in">data</span>, forCharacteristic: writeCharacteristic, <span class="keyword">type</span>: <span class="keyword">type</span>)</span><br></pre></td></tr></table></figure>
<p>把要发送的文本转换为二进制，发送到相应的特征即可。值得注意的是第三个参数type写类型需要与特征的属性一致，其中WithoutResponse与WithResponse区别在于前者发送数据后是没有回调的，后者会回调到  <code>peripheral(peripheral:didWriteValueForCharacteristic:error:)</code> 来检测是否发送成功，如果发送数据传入的类型与特征不同时总是会失败</p>
<blockquote>
<p>由于蓝牙的缓冲大小只有20bytes，那么如果我们发送的数据包大小不能大于20bytes，所以得分多次发送</p>
</blockquote>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">func writeValue(<span class="built_in">data</span>: NSData, withCharacteristic characteristic: CBCharacteristic) <span class="subst">-&gt; </span>Bool &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">self</span><span class="built_in">.</span>peripheral <span class="subst">==</span> nil) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">var</span> didSend <span class="subst">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="built_in">var</span> sendDataIndex <span class="subst">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span>  NOTIFY_MTU <span class="subst">=</span> <span class="number">20</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">data</span><span class="built_in">.</span>length <span class="subst">-</span> sendDataIndex <span class="subst">!=</span> <span class="number">0</span>) &#123;</span><br><span class="line">   		<span class="comment">//剩下的数据大小</span></span><br><span class="line">        <span class="built_in">var</span> amountToSend <span class="subst">=</span> <span class="built_in">data</span><span class="built_in">.</span>length <span class="subst">-</span> sendDataIndex</span><br><span class="line">        <span class="comment">// 不能大于20bytes</span></span><br><span class="line">        <span class="keyword">if</span> (amountToSend <span class="subst">&gt;</span> NOTIFY_MTU) &#123;</span><br><span class="line">            amountToSend <span class="subst">=</span> NOTIFY_MTU</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> chunk <span class="subst">=</span> NSData(<span class="built_in">bytes</span>: <span class="built_in">data</span><span class="built_in">.</span><span class="built_in">bytes</span> <span class="subst">+</span> sendDataIndex, length: amountToSend)</span><br><span class="line">        <span class="built_in">var</span> <span class="keyword">type</span>: CBCharacteristicWriteType <span class="subst">=</span> <span class="built_in">.</span>WithoutResponse</span><br><span class="line">        <span class="keyword">if</span>(characteristic<span class="built_in">.</span>properties <span class="subst">==</span> CBCharacteristicProperties<span class="built_in">.</span>Write) &#123;</span><br><span class="line">            <span class="keyword">type</span> <span class="subst">=</span> <span class="built_in">.</span>WithResponse</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">self</span><span class="built_in">.</span>peripheral<span class="subst">!</span><span class="built_in">.</span>writeValue(chunk, forCharacteristic: characteristic, <span class="keyword">type</span>: <span class="keyword">type</span>)</span><br><span class="line">        sendDataIndex <span class="subst">+=</span> amountToSend</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="读取数据">读取数据</h2><p>分为二种，直接读、订阅，顾名思义，直接读就是手动调用API读取，订阅则只要开启后，外设有消息都可以收到</p>
<p>直接读</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.peripheral!.<span class="function"><span class="title">readValueForCharacteristic</span><span class="params">(characteristic)</span></span></span><br></pre></td></tr></table></figure>
<p>订阅</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">self</span><span class="class">.peripheral</span>!<span class="class">.setNotifyValue</span>(<span class="tag">true</span>, <span class="rule"><span class="attribute">forCharacteristic</span>:<span class="value"> characteristic)</span></span></span><br></pre></td></tr></table></figure>
<p>两种回调都会回调到 <code>peripheral(peripheral:didUpdateValueForCharacteristic:error:)</code>，上面也提到因为蓝牙的缓冲大小，需要发送多次，那么在读取时也需要接收多次，才能保证数据的一体性，所以通常都会在数据包的开始用 <code>EOM</code> 来标识一段数据的开始，数据结束后再次用 <code>EOM</code> 来标识，所以我们接收数据时会这样</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> updatingEOMFlag = <span class="string">"EOM"</span></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">peripheral</span><span class="params">(peripheral: CBPeripheral!, didUpdateValueForCharacteristic characteristic: CBCharacteristic!, error: NSError!)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(error != <span class="literal">nil</span>) &#123;</span><br><span class="line">        log(error)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(characteristic.value != <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> data = characteristic.value!</span><br><span class="line">        <span class="keyword">var</span> string = <span class="type">NSString</span>(data: data, encoding: <span class="type">NSUTF8StringEncoding</span>)</span><br><span class="line">        log(string)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//接收多段数据</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">self</span>.updatingEOMFlag != <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">self</span>.updatingEOMFlag == string) &#123;</span><br><span class="line">                <span class="keyword">var</span> <span class="type">EOMEndFlag</span> = <span class="literal">false</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="keyword">self</span>.updatingDatas.<span class="built_in">count</span> &#123; <span class="comment">//数据结束</span></span><br><span class="line">                    <span class="keyword">var</span> updatingData = <span class="keyword">self</span>.updatingDatas[i]</span><br><span class="line">                    <span class="keyword">if</span>(updatingData.characteristic.<span class="type">UUID</span>.isEqual(characteristic.<span class="type">UUID</span>)) &#123;</span><br><span class="line">                        data = updatingData.data</span><br><span class="line">                        string = <span class="type">NSString</span>(data: data, encoding: <span class="type">NSUTF8StringEncoding</span>)</span><br><span class="line">                        <span class="keyword">self</span>.updatingDatas.removeAtIndex(i) <span class="comment">//删除缓存数据</span></span><br><span class="line">                        <span class="type">EOMEndFlag</span> = <span class="literal">true</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="type">EOMEndFlag</span>) &#123;<span class="comment">//数据开始</span></span><br><span class="line">                    <span class="keyword">let</span> updatingData = <span class="type">UpdatingDataer</span>(characteristic: characteristic, data: <span class="type">NSMutableData</span>())</span><br><span class="line">                    <span class="keyword">self</span>.updatingDatas!.append(updatingData)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">var</span> updatingData = (<span class="keyword">self</span>.updatingDatas?.<span class="built_in">filter</span>&#123; $<span class="number">0</span>.characteristic.<span class="type">UUID</span>.isEqual(characteristic.<span class="type">UUID</span>) &#125;) <span class="keyword">where</span> updatingData.<span class="built_in">count</span> == <span class="number">1</span> &amp;&amp; updatingData[<span class="number">0</span>].data != <span class="literal">nil</span> &#123; <span class="comment">//数据中间</span></span><br><span class="line">                    updatingData[<span class="number">0</span>].data.appendData(data)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在此最终得到完整数据</span></span><br><span class="line">        <span class="keyword">let</span> stringData = <span class="type">StringData</span>(string: string <span class="keyword">as</span>? <span class="type">String</span>, data: data)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//触发delegate与通知回调</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="断开连接">断开连接</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">self</span><span class="class">.centralMgr</span><span class="class">.cancelPeripheralConnection</span>(<span class="tag">self</span><span class="class">.peripheral</span>!)</span><br></pre></td></tr></table></figure>
<p>至此，整个流程就完了</p>
<h2 id="高级需求~">高级需求~</h2><h4 id="外设掉线检测">外设掉线检测</h4><p>所谓掉线就是外设发现了后，过了一段时间失去信号了。喵了下系统框架，没有找到相关外设掉线的检测，唯一有点像的就是发现外设里面的RSSI,代表设备信号强度，值越小信息越好。</p>
<h2 id="总结">总结</h2><ul>
<li>在蓝牙交互的二种角色中，通常APP端扮演<code>中央Central</code>的角色，设备扮演<code>外设Peripheral</code>的角色</li>
<li>创建CBCentralManager对象时传入的Queue决定了后续CBCentralManagerDelegate、CBPeripheralDelegate等回调的所在线程</li>
<li>一个外设设备可包含一个或多个服务，一个服务可包含一个或多个特征，读写操作最终是针对特征。</li>
<li>蓝牙的缓冲大小只有20bytes，在发送数据时最多只能发送20bytes，所以得分多次发送，数据的一体性可以用 EOM 标识符表标识</li>
</ul>
<blockquote>
<p> 更新: 提供了一个读写的<a href="https://github.com/mokai/BluetoothDemos" target="_blank" rel="external">Central端Demo</a>，Peripheral端请用上述iOS版LightBlue模拟</p>
</blockquote>
<h2 id="参考">参考</h2><p><a href="https://developer.apple.com/library/ios/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/AboutCoreBluetooth/Introduction.html" target="_blank" rel="external">Core Bluetooth Programming Guide</a></p>
<p><a href="http://www.jianshu.com/p/760f042a1d81" target="_blank" rel="external">译-iOS蓝牙编程指南</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>蓝牙技术，很早以前就被有了，如今已更新4.0版本。很多热门技术都是基于它工作的，如Android平台的NFC，iOS的iBeancon，Apple Watch的WatchConnectivity框架等，现在的智能家居基本也是基于蓝牙4.0与APP进行通信，可见蓝牙在实践工作中的重要性。在iOS中，蓝牙是基于4.0标准的，设备间低功耗通信。</p>]]>
    
    </summary>
    
      <category term="蓝牙" scheme="http://mokai.github.io/tags/%E8%93%9D%E7%89%99/"/>
    
      <category term="记录" scheme="http://mokai.github.io/categories/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IB中Runtime Attributes个别属性无效]]></title>
    <link href="http://mokai.github.io/2015/04/IB%E4%B8%ADRuntime%20Attributes%E4%B8%AA%E5%88%AB%E5%B1%9E%E6%80%A7%E6%97%A0%E6%95%88/"/>
    <id>http://mokai.github.io/2015/04/IB中Runtime Attributes个别属性无效/</id>
    <published>2015-04-06T16:00:00.000Z</published>
    <updated>2016-09-11T05:10:12.000Z</updated>
    <content type="html"><![CDATA[<p>在使用Xcode IB方式编码中，经常会使用到属性列表中没有的属性，这时则需要通过<code>Runtime Attributes</code>来动态注入(实则为<code>KVO</code>实现)</p>
<a id="more"></a>
<p><img src="http://7xiew0.com1.z0.glb.clouddn.com/2015-04-07_1.png" alt=""></p>
<p>但有个别属性设置你会发现怎样都无效</p>
<p>如：<code>layer.borderColor</code></p>
<p><img src="http://7xiew0.com1.z0.glb.clouddn.com/2015-04-07_2.png" alt=""></p>
<p>原因在于<code>borderColor</code>接受的参数是CGColor类型，而此处的Color为UIColor，所以导致注入时参数类型不一致</p>
<h3 id="解决方案：利用扩展自定义一个中间属性器来转换一下类型就OK了">解决方案：利用扩展自定义一个<code>中间属性器</code>来转换一下类型就OK了</h3><p>1、自定义代码</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">extension <span class="built_in">CALayer</span>&#123;</span><br><span class="line">    <span class="comment">//解决IB中runtime attribute中layer.borderColor不能转换UIColor为CGColor</span></span><br><span class="line">    var borderColorFrom<span class="built_in">UIColor</span>: <span class="built_in">UIColor</span> &#123;</span><br><span class="line">        set(color)&#123;</span><br><span class="line">            <span class="keyword">self</span><span class="variable">.borderColor</span> = color<span class="variable">.CGColor</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        get&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">UIColor</span>(<span class="built_in">CGColor</span>: <span class="keyword">self</span><span class="variable">.borderColor</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意,swift与OC的属性设置器不同，OC中是setXXX，而swift是有内部setter</p>
</blockquote>
<p>2、IB中设置，把原先的<code>layer.borderColor</code>改为<code>layer.borderColorFromUIColor</code></p>
<p><img src="http://7xiew0.com1.z0.glb.clouddn.com/2015-04-07_3.png" alt=""></p>
<p>参考:<br><a href="http://ios-blog.co.uk/tutorials/user-defined-runtime-attributes/" target="_blank" rel="external">User Defined Runtime Attributes</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在使用Xcode IB方式编码中，经常会使用到属性列表中没有的属性，这时则需要通过<code>Runtime Attributes</code>来动态注入(实则为<code>KVO</code>实现)</p>]]>
    
    </summary>
    
      <category term="iBug" scheme="http://mokai.github.io/categories/iBug/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hello]]></title>
    <link href="http://mokai.github.io/2015/04/hello/"/>
    <id>http://mokai.github.io/2015/04/hello/</id>
    <published>2015-03-31T16:00:00.000Z</published>
    <updated>2015-11-03T10:06:28.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xiew0.com1.z0.glb.clouddn.com/2015-04-01-hello_just_do_it.jpg" alt=""></p>
<p>Hello，new Blog~</p>
<p>之前一直都是在<a href="http://blog.csdn.net/VictorMoKai" target="_blank" rel="external">csdn</a>上写博客(其实也没怎么写(⊙o⊙)…)，最近订了些目标，个人网站就是其中一项</p>
<p>so~ Just do it!</p>
<a id="more"></a>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xiew0.com1.z0.glb.clouddn.com/2015-04-01-hello_just_do_it.jpg" alt=""></p>
<p>Hello，new Blog~</p>
<p>之前一直都是在<a href="http://blog.csdn.net/VictorMoKai">csdn</a>上写博客(其实也没怎么写(⊙o⊙)…)，最近订了些目标，个人网站就是其中一项</p>
<p>so~ Just do it!</p>]]>
    
    </summary>
    
      <category term="记录" scheme="http://mokai.github.io/categories/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
</feed>